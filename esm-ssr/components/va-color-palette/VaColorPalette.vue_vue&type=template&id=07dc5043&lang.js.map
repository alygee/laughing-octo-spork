{"version":3,"file":"VaColorPalette.vue_vue&type=template&id=07dc5043&lang.js","sources":["../../../../src/components/va-color-palette/VaColorPalette.vue?vue&type=template&id=07dc5043&lang.js"],"sourcesContent":["<template>\n  <div class=\"va-color-palette\">\n    <ul class=\"va-color-palette__colors\">\n      <va-color-indicator\n        v-for=\"(color, index) in palette\"\n        :modelValue=\"context.valueComputed === color\"\n        :key=\"index\"\n        :color=\"color\"\n        :square=\"indicator === 'square'\"\n        @update:modelValue=\"context.valueComputed = color\"\n      />\n    </ul>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Options, prop, setup } from 'vue-class-component'\nimport { statefulComponentOptions, useStateful } from '../../mixins/StatefulMixin/cStatefulMixin'\nimport VaColorIndicator from '../va-color-indicator'\n\nclass ColorPaletteProps {\n  indicator = prop<string>({\n    type: String,\n    default: 'dot',\n    validator: (value: string) => {\n      return ['dot', 'square'].includes(value)\n    },\n  })\n\n  palette = prop<Array<string>>({\n    type: Array,\n    default: () => [],\n  })\n}\n\n@Options({\n  name: 'VaColorPalette',\n  components: { VaColorIndicator },\n  ...statefulComponentOptions,\n})\nexport default class VaColorPalette extends Vue.with(ColorPaletteProps) {\n  context = setup(() => useStateful(this.$props, this.$emit))\n\n  isSelected (color: any): boolean {\n    return this.context.valueComputed === color\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.va-color-palette {\n  padding-top: 3px;\n\n  &__colors {\n    display: flex;\n\n    & > * {\n      margin-right: 0.25rem;\n\n      &:last-child {\n        margin-right: 0;\n      }\n    }\n  }\n}\n</style>\n"],"names":["_mergeProps","class","_ctx","color","index","modelValue","valueComputed","key","square"],"mappings":"8PACEA,GAAKC,MAAM,iHAGoBC,YAAjBC,EAAOC,YACdC,WAAYH,UAAQI,gBAAkBH,EACtCI,IAAKH,EACLD,MAAOA,EACPK,kBAAQN"}