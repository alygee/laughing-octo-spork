{"version":3,"file":"grid-keyboard-navigation.js","sources":["../../../../../src/components/va-date-picker/hooks/grid-keyboard-navigation.ts"],"sourcesContent":["import { ref, Ref, isRef, unref } from 'vue'\n\nfunction safeUnref<T> (refOrRaw: Ref<T> | T): T {\n  if (isRef(refOrRaw)) {\n    return unref(refOrRaw)\n  }\n\n  return refOrRaw\n}\n\nfunction isUndefined<T> (t: T | undefined): t is undefined {\n  return t === undefined\n}\n\nexport const useGridKeyboardNavigation = (\n  {\n    rowSize,\n    start,\n    end,\n    onSelected,\n    onFocusIndex,\n  }: {\n    rowSize: number,\n    start?: Ref<number> | number,\n    end?: Ref<number> | number,\n    onFocusIndex?: Ref<number> | number,\n    onSelected?: (selectedValue: number) => any | null,\n  },\n) => {\n  const focusedCellIndex = ref(-1)\n\n  let previouslyClicked = false\n  const onMousedown = () => { previouslyClicked = true }\n\n  const onFocus = () => {\n    if (previouslyClicked) { return }\n    previouslyClicked = false\n\n    const index = onFocusIndex === undefined ? safeUnref(start) || 0 : safeUnref(onFocusIndex)\n\n    focusedCellIndex.value = index\n  }\n\n  const onBlur = () => {\n    previouslyClicked = false\n\n    focusedCellIndex.value = -1\n  }\n\n  const onKeydown = (e: KeyboardEvent) => {\n    if (['ArrowRight', 'ArrowLeft', 'ArrowDown', 'ArrowUp', 'Enter', 'Space'].includes(e.key)) {\n      // Prevent default for arrow keys and enter. Do not prevent default for tab! :)\n      e.preventDefault()\n    }\n\n    if (e.key === 'Enter' || e.key === 'Space') {\n      if (onSelected === undefined) { return }\n\n      onSelected(focusedCellIndex.value)\n      return\n    }\n\n    if (e.key === 'ArrowRight') {\n      focusedCellIndex.value += 1\n    }\n    if (e.key === 'ArrowLeft') {\n      focusedCellIndex.value -= 1\n    }\n    if (e.key === 'ArrowDown') {\n      focusedCellIndex.value += rowSize\n    }\n    if (e.key === 'ArrowUp') {\n      focusedCellIndex.value -= rowSize\n    }\n\n    if (!isUndefined(start) && focusedCellIndex.value < safeUnref(start)) {\n      focusedCellIndex.value = safeUnref(start)\n    }\n    if (!isUndefined(end) && focusedCellIndex.value > safeUnref(end) - 1) {\n      focusedCellIndex.value = safeUnref(end) - 1\n    }\n  }\n\n  const containerAttributes = {\n    onFocus, onKeydown, onBlur, onMousedown, tabindex: 0,\n  }\n\n  return {\n    focusedCellIndex, containerAttributes,\n  }\n}\n"],"names":["safeUnref","refOrRaw","isRef","unref","isUndefined","t","undefined","useGridKeyboardNavigation","rowSize","start","end","onSelected","onFocusIndex","focusedCellIndex","ref","previouslyClicked","containerAttributes","onFocus","index","value","onKeydown","e","includes","key","preventDefault","onBlur","onMousedown","tabindex"],"mappings":"gDAEA,SAASA,EAAcC,GACrB,OAAIC,EAAMD,GACDE,EAAMF,GAGRA,EAGT,SAASG,EAAgBC,GACvB,YAAaC,IAAND,QAGIE,EAA4B,EAErCC,QAAAA,EACAC,MAAAA,EACAC,IAAAA,EACAC,WAAAA,EACAC,aAAAA,MASF,MAAMC,EAAmBC,GAAK,GAE9B,IAAIC,GAAoB,EACxB,MAmDMC,EAAsB,CAC1BC,QAlDc,KACd,GAAIF,EAAqB,OACzBA,GAAoB,EAEpB,MAAMG,OAAyBZ,IAAjBM,EAA6BZ,EAAUS,IAAU,EAAIT,EAAUY,GAE7EC,EAAiBM,MAAQD,GA4ChBE,UAnCQC,IAMjB,GALI,CAAC,aAAc,YAAa,YAAa,UAAW,QAAS,SAASC,SAASD,EAAEE,MAEnFF,EAAEG,iBAGU,UAAVH,EAAEE,KAA6B,UAAVF,EAAEE,IAOb,eAAVF,EAAEE,MACJV,EAAiBM,OAAS,GAEd,cAAVE,EAAEE,MACJV,EAAiBM,OAAS,GAEd,cAAVE,EAAEE,MACJV,EAAiBM,OAASX,GAEd,YAAVa,EAAEE,MACJV,EAAiBM,OAASX,IAGvBJ,EAAYK,IAAUI,EAAiBM,MAAQnB,EAAUS,KAC5DI,EAAiBM,MAAQnB,EAAUS,KAEhCL,EAAYM,IAAQG,EAAiBM,MAAQnB,EAAUU,GAAO,IACjEG,EAAiBM,MAAQnB,EAAUU,GAAO,OAxB5C,CACE,QAAmBJ,IAAfK,EAA4B,OAEhCA,EAAWE,EAAiBM,SA0BVM,OAzCP,KACbV,GAAoB,EAEpBF,EAAiBM,OAAS,GAsCEO,YApDV,KAAQX,GAAoB,GAoDLY,SAAU,GAGrD,MAAO,CACLd,iBAAAA,EAAkBG,oBAAAA"}