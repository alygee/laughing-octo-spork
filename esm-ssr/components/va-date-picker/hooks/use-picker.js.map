{"version":3,"file":"use-picker.js","sources":["../../../../../src/components/va-date-picker/hooks/use-picker.ts"],"sourcesContent":["import { isDatesMonthEqual, isDatesDayEqual, isDatesYearEqual } from './../utils/date-utils'\nimport { VaDatePickerMode, VaDatePickerModelValue, VaDatePickerType } from '../types/types'\nimport { isDates, isRange, isSingleDate, useDatePickerModelValue } from './model-value-helper'\nimport { computed, ComputedRef, ref } from 'vue'\n\nconst getDateEqualFunction = (type: VaDatePickerType) => {\n  return {\n    month: isDatesMonthEqual,\n    day: isDatesDayEqual,\n    year: isDatesYearEqual,\n  }[type]\n}\n\nexport const useDatePicker = (\n  type: VaDatePickerType,\n  dates: ComputedRef<Date[]>,\n  props: {\n    [key: string]: any,\n    modelValue?: VaDatePickerModelValue,\n    mode: VaDatePickerMode,\n  },\n  emit: (\n    event: 'update:modelValue' | any,\n    ...args: any[]\n  ) => any,\n) => {\n  const datesEqual = getDateEqualFunction(type)\n\n  const hoveredIndex = ref(0)\n  const hoveredValue = computed(() => dates.value[hoveredIndex.value])\n\n  const { updateModelValue } = useDatePickerModelValue(\n    props,\n    emit,\n    datesEqual,\n  )\n\n  const onClick = (date: Date) => {\n    updateModelValue(date)\n    emit(`click:${type}`, date)\n  }\n\n  const isToday = (date: Date): boolean => {\n    const today = new Date()\n    return datesEqual(today, date)\n  }\n\n  const isSelected = (date: Date): boolean => {\n    if (!props.modelValue) { return false }\n\n    if (isSingleDate(props.modelValue)) {\n      return datesEqual(props.modelValue, date)\n    } else if (isDates(props.modelValue)) {\n      return !!props.modelValue.find((d) => datesEqual(d, date))\n    } else if (isRange(props.modelValue)) {\n      return datesEqual(props.modelValue.start, date) || datesEqual(props.modelValue.end, date)\n    }\n\n    return false\n  }\n\n  const isInRange = (date: Date): boolean => {\n    if (!props.modelValue) { return false }\n\n    if (!isRange(props.modelValue)) { return false }\n\n    if (props.modelValue.start && props.modelValue.end) {\n      return props.modelValue.start < date && props.modelValue.end > date\n    }\n\n    const selectedDate = props.modelValue.start || props.modelValue.end\n\n    if (selectedDate) {\n      if (!hoveredValue.value) { return false }\n\n      return selectedDate < date\n        ? (hoveredValue.value >= date)\n        : (hoveredValue.value <= date)\n    }\n\n    return false\n  }\n\n  return {\n    hoveredIndex,\n    hoveredValue,\n    onClick,\n    isToday,\n    isSelected,\n    isInRange,\n  }\n}\n"],"names":["useDatePicker","type","dates","props","emit","datesEqual","month","isDatesMonthEqual","day","isDatesDayEqual","year","isDatesYearEqual","getDateEqualFunction","hoveredIndex","ref","hoveredValue","computed","value","updateModelValue","useDatePickerModelValue","onClick","date","isToday","today","Date","isSelected","modelValue","isSingleDate","isDates","find","d","isRange","start","end","isInRange","selectedDate"],"mappings":"4PAKA,MAQaA,EAAgB,CAC3BC,EACAC,EACAC,EAKAC,KAKA,MAAMC,EArBqB,CAACJ,IACrB,CACLK,MAAOC,EACPC,IAAKC,EACLC,KAAMC,GACNV,IAgBiBW,CAAqBX,GAElCY,EAAeC,EAAI,GACnBC,EAAeC,GAAS,IAAMd,EAAMe,MAAMJ,EAAaI,UAEvDC,iBAAEA,GAAqBC,EAC3BhB,EACAC,EACAC,GAiDF,MAAO,CACLQ,aAAAA,EACAE,aAAAA,EACAK,QAjDeC,IACfH,EAAiBG,GACjBjB,EAAK,SAASH,IAAQoB,IAgDtBC,QA7CeD,IACf,MAAME,EAAQ,IAAIC,KAClB,OAAOnB,EAAWkB,EAAOF,IA4CzBI,WAzCkBJ,KACblB,EAAMuB,aAEPC,EAAaxB,EAAMuB,YACdrB,EAAWF,EAAMuB,WAAYL,GAC3BO,EAAQzB,EAAMuB,cACdvB,EAAMuB,WAAWG,MAAMC,GAAMzB,EAAWyB,EAAGT,OAC3CU,EAAQ5B,EAAMuB,cAChBrB,EAAWF,EAAMuB,WAAWM,MAAOX,IAAShB,EAAWF,EAAMuB,WAAWO,IAAKZ,KAkCtFa,UA5BiBb,IACjB,IAAKlB,EAAMuB,WAAc,OAAO,EAEhC,IAAKK,EAAQ5B,EAAMuB,YAAe,OAAO,EAEzC,GAAIvB,EAAMuB,WAAWM,OAAS7B,EAAMuB,WAAWO,IAC7C,OAAO9B,EAAMuB,WAAWM,MAAQX,GAAQlB,EAAMuB,WAAWO,IAAMZ,EAGjE,MAAMc,EAAehC,EAAMuB,WAAWM,OAAS7B,EAAMuB,WAAWO,IAEhE,QAAIE,MACGpB,EAAaE,QAEXkB,EAAed,EACjBN,EAAaE,OAASI,EACtBN,EAAaE,OAASI"}