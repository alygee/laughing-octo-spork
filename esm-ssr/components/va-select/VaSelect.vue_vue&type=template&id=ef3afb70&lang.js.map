{"version":3,"file":"VaSelect.vue_vue&type=template&id=ef3afb70&lang.js","sources":["../../../../src/components/va-select/VaSelect.vue?vue&type=template&id=ef3afb70&lang.js"],"sourcesContent":["<template>\n  <va-input-wrapper\n    :success=\"$props.success\"\n    :messages=\"$props.messages\"\n    :error=\"$props.error\"\n    :error-messages=\"computedErrorMessages\"\n    :style=\"{ width: $props.width }\"\n  >\n    <va-dropdown\n      ref=\"dropdown\"\n      v-model=\"showDropdownContentComputed\"\n      :position=\"$props.position\"\n      :disabled=\"$props.disabled\"\n      :max-height=\"$props.maxHeight\"\n      :fixed=\"$props.fixed\"\n      :close-on-content-click=\"closeOnContentClick\"\n      trigger=\"none\"\n      class=\"va-select__dropdown\"\n      keep-anchor-width\n      boundary-body\n      :stateful=false\n    >\n      <template #anchor>\n        <div\n          class=\"va-select\"\n          ref=\"select\"\n          :tabindex=\"tabIndexComputed\"\n          @focus=\"focus\"\n          @blur=\"blur\"\n          @keydown.enter.stop.prevent=\"onSelectClick()\"\n          @keydown.space.stop.prevent=\"onSelectClick()\"\n          @click.prevent=\"onSelectClick()\"\n        >\n          <!-- We show messages outside of dropdown to draw dropdown content under the input -->\n          <va-input\n            :model-value=\"valueComputedString\"\n            :success=\"$props.success\"\n            :error=\"computedError\"\n            :clearable=\"showClearIcon\"\n            :clearableIcon=\"$props.clearableIcon\"\n            :color=\"$props.color\"\n            :label=\"$props.label\"\n            :placeholder=\"$props.placeholder\"\n            :loading=\"$props.loading\"\n            :disabled=\"$props.disabled\"\n            :outline=\"$props.outline\"\n            :bordered=\"$props.bordered\"\n            :focused=\"isFocusedComputed\"\n            :tabindex=\"-1\"\n            readonly\n            @cleared=\"reset\"\n          >\n            <template\n              v-if=\"$slots.prepend\"\n              #prepend\n            >\n              <slot name=\"prepend\" />\n            </template>\n\n            <template\n              v-if=\"$slots.append\"\n              #append\n            >\n              <slot name=\"append\" />\n            </template>\n\n            <template\n              v-if=\"$slots.prependInner\"\n              #prependInner\n            >\n              <slot name=\"prependInner\" />\n            </template>\n\n            <template #appendInner>\n              <div class=\"va-input__append\">\n                <slot\n                  v-if=\"$slots.appendInner\"\n                  name=\"appendInner\"\n                />\n                <va-icon\n                  :color=\"colorComputed\"\n                  :name=\"toggleIcon\"\n                />\n              </div>\n            </template>\n\n            <template v-if=\"$slots.content\" #content=\"{ value, focus }\">\n              <slot name=\"content\" v-bind=\"{ valueString: value, focus, value: valueComputed }\" />\n            </template>\n          </va-input>\n        </div>\n      </template>\n\n      <!-- Stop propagation for enter keyup event, to prevent VaDropdown closing -->\n      <va-dropdown-content\n        @keyup.enter.stop\n        @keydown.esc.prevent=\"hideAndFocus\"\n        @keydown.tab=\"hideDropdown\"\n      >\n        <va-input\n          v-if=\"showSearchInput\"\n          :id=\"$props.id\"\n          ref=\"searchBar\"\n          v-model=\"searchInput\"\n          class=\"va-select__input\"\n          placeholder=\"Search\"\n          removable\n          :name=\"$props.name\"\n          :tabindex=\"tabindex + 1\"\n          :bordered=\"true\"\n          @keydown.up.stop.prevent=\"hoverPreviousOption()\"\n          @keydown.left.stop.prevent=\"hoverPreviousOption()\"\n          @keydown.down.stop.prevent=\"hoverNextOption()\"\n          @keydown.right.stop.prevent=\"hoverNextOption()\"\n          @keydown.enter.prevent=\"selectOrAddOption()\"\n          @focus=\"hoveredOption = null\"\n        />\n        <div class=\"va-select__dropdown__content\">\n          <va-select-option-list\n            ref=\"optionList\"\n            v-model:hoveredOption=\"hoveredOption\"\n            :style=\"{ maxHeight: $props.maxHeight }\"\n            :options=\"filteredOptions\"\n            :selected-value=\"valueComputed\"\n            :get-selected-state=\"checkIsOptionSelected\"\n            :get-text=\"getText\"\n            :get-track-by=\"getTrackBy\"\n            :search=\"searchInput\"\n            :no-options-text=\"$props.noOptionsText\"\n            :color=\"$props.color\"\n            :tabindex=\"tabindex + 1\"\n            @select-option=\"selectOption\"\n            @no-previous-option-to-hover=\"focusSearchBar()\"\n            @keydown.enter.stop.prevent=\"selectHoveredOption()\"\n            @keydown.space.stop.prevent=\"selectHoveredOption()\"\n            @keydown=\"onHintedSearch\"\n          />\n        </div>\n      </va-dropdown-content>\n    </va-dropdown>\n  </va-input-wrapper>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, ref, computed, watch, nextTick } from 'vue'\n\nimport { useSelectableList, useSelectableListProps } from '../../composables/useSelectableList'\nimport { useFormComponent, useFormComponentProps } from '../../composables/useFormComponent'\nimport { useLoadingProps } from '../../composables/useLoading'\nimport { useColor } from '../../composables/useColor'\nimport { useMaxSelections, useMaxSelectionsProps } from '../../composables/useMaxSelections'\n\nimport { warn } from '../../services/utils'\nimport VaDropdown from '../va-dropdown'\nimport VaIcon from '../va-icon'\nimport VaInput, { VaInputWrapper } from '../va-input'\n\nimport VaSelectOptionList from './VaSelectOptionList'\n\ntype DropdownIcon = {\n  open: string,\n  close: string\n}\n\nexport default defineComponent({\n  name: 'VaSelect',\n  components: {\n    VaSelectOptionList,\n    VaIcon,\n    VaDropdown,\n    VaInput,\n    VaInputWrapper,\n  },\n  emits: ['update-search', 'update:modelValue', 'clear'],\n  props: {\n    ...useSelectableListProps,\n    ...useFormComponentProps,\n    ...useLoadingProps,\n    ...useMaxSelectionsProps,\n\n    modelValue: {\n      type: [String, Number, Object, Array] as PropType<string | number | Record<string, any> | any[]>,\n      default: '',\n    },\n\n    // Dropdown position\n    position: {\n      type: String as PropType<string>,\n      default: 'bottom',\n      validator: (position: string) => ['top', 'bottom'].includes(position),\n    },\n\n    allowCreate: {\n      type: [Boolean, String] as PropType<boolean | string>,\n      default: false,\n      validator: (mode: string | boolean) => {\n        return [true, false, 'unique'].includes(mode)\n      },\n    },\n\n    color: { type: String as PropType<string>, default: 'primary' },\n    multiple: { type: Boolean as PropType<boolean>, default: false },\n    searchable: { type: Boolean as PropType<boolean>, default: false },\n    disabled: { type: Boolean as PropType<boolean>, default: false },\n    readonly: { type: Boolean as PropType<boolean>, default: false }, // Probably unused prop! THIS WAS UNUSED! USE\n    separator: { type: String as PropType<string>, default: ', ' },\n    width: { type: String as PropType<string>, default: '100%' },\n    maxHeight: { type: String as PropType<string>, default: '128px' },\n    clearValue: { type: String as PropType<string>, default: '' },\n    noOptionsText: { type: String as PropType<string>, default: 'Items not found' },\n    fixed: { type: Boolean as PropType<boolean>, default: true },\n    clearable: { type: Boolean as PropType<boolean>, default: false },\n    clearableIcon: { type: String as PropType<string>, default: 'highlight_off' },\n    hideSelected: { type: Boolean as PropType<boolean>, default: false },\n    tabindex: { type: Number as PropType<number>, default: 0 },\n    dropdownIcon: {\n      type: [String, Object] as PropType<string | DropdownIcon>,\n      default: (): DropdownIcon => ({\n        open: 'expand_more',\n        close: 'expand_less',\n      }),\n      validator: (value: any) => {\n        if (typeof value === 'string') { return true }\n\n        const isOpenIconString = typeof value.open === 'string'\n        const isCloseIconString = typeof value.close === 'string'\n\n        return isOpenIconString && isCloseIconString\n      },\n    },\n\n    // Input style\n    outline: { type: Boolean as PropType<boolean>, default: false },\n    bordered: { type: Boolean as PropType<boolean>, default: false },\n    label: { type: String as PropType<string>, default: '' },\n    placeholder: { type: String as PropType<string>, default: '' },\n  },\n\n  setup (props, context) {\n    // DOM element or component instance will be assigned to these refs after initial render (template refs and reactive refs are unified in Composition API)\n    const select = ref(null as any)\n    const optionList = ref(null as any)\n    const searchBar = ref(null as any)\n\n    const { getOptionByValue, getValue, getText, getTrackBy } = useSelectableList(props)\n    const { validate, isFocused, computedErrorMessages, computedError } = useFormComponent(props, context)\n    const { colorComputed } = useColor(props)\n\n    const searchInput = ref('')\n    const showSearchInput = computed(() => {\n      return props.searchable || props.allowCreate\n    })\n\n    watch(() => searchInput.value, (value) => {\n      context.emit('update-search', value)\n      hoveredOption.value = null\n    })\n\n    // Select value\n\n    const valueComputed = computed({\n      get () {\n        const value = getOptionByValue(props.modelValue)\n\n        if (props.multiple) {\n          if (!value) {\n            return []\n          }\n\n          if (!Array.isArray(value)) {\n            return [value]\n          }\n\n          return value\n        }\n\n        if (Array.isArray(value)) {\n          warn('Model value should be a string for a single Select.')\n\n          if (value.length) {\n            return value[value.length - 1]\n          }\n        }\n\n        return value\n      },\n\n      set (value: any) {\n        context.emit('update:modelValue', getValue(value))\n      },\n    })\n\n    const valueComputedString = computed((): string => {\n      if (!valueComputed.value) { return props.clearValue }\n      if (typeof valueComputed.value === 'string') { return valueComputed.value }\n      if (Array.isArray(valueComputed.value)) {\n        return valueComputed.value.map((value) => getText(value)).join(props.separator) || props.clearValue\n      }\n\n      return getText(valueComputed.value)\n    })\n\n    // Icons\n\n    const showClearIcon = computed((): boolean => {\n      if (!props.clearable) { return false }\n      if (props.disabled) { return false }\n      if (props.multiple) { return !!valueComputed.value.length }\n\n      return valueComputed.value !== props.clearValue\n    })\n\n    const toggleIcon = computed((): string => {\n      if (!props.dropdownIcon) { return '' }\n\n      if (typeof props.dropdownIcon === 'string') {\n        return props.dropdownIcon\n      }\n\n      return showDropdownContent.value ? props.dropdownIcon.close : props.dropdownIcon.open\n    })\n\n    // Options\n\n    const filteredOptions = computed((): any[] => {\n      if (!props.options) { return [] }\n\n      if (props.hideSelected) {\n        return (props.options).filter((option) => !checkIsOptionSelected(option))\n      }\n\n      return props.options\n    })\n\n    const checkIsOptionSelected = (option: any): boolean => {\n      if (!valueComputed.value) { return false }\n\n      if (Array.isArray(valueComputed.value)) {\n        return !!valueComputed.value.find((valueItem: any) => compareOptions(valueItem, option))\n      }\n\n      return compareOptions(valueComputed.value, option)\n    }\n\n    const compareOptions = (one: any, two: any) => {\n      // identity check works nice for strings and exact matches.\n      if (one === two) {\n        return true\n      }\n      if (typeof one === 'string' && typeof two === 'string') {\n        return one === two\n      }\n      if (one === null || two === null) {\n        return false\n      }\n      if (typeof one === 'object' && typeof two === 'object') {\n        return getTrackBy(one) === getTrackBy(two)\n      }\n\n      return false\n    }\n\n    const selectedOption = computed(() => {\n      if (props.multiple) { return null }\n      if (!valueComputed.value) { return null }\n      if (!props.options) { return null }\n\n      return props.options.find((option: any) => compareOptions(option, valueComputed.value))\n    })\n\n    const { exceedsMaxSelections, addOption } = useMaxSelections(valueComputed, ref(props.maxSelections), context.emit)\n\n    const selectOption = (option: any): void => {\n      if (hoveredOption.value === null) {\n        hideAndFocus()\n        return\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = ''\n      }\n\n      if (props.multiple) {\n        const isSelected = checkIsOptionSelected(option)\n\n        if (isSelected) {\n          // Unselect\n          valueComputed.value = valueComputed.value.filter((optionSelected: any) => !compareOptions(option, optionSelected))\n        } else {\n          if (exceedsMaxSelections()) { return }\n          addOption(option)\n        }\n      } else {\n        valueComputed.value = typeof option === 'string' ? option : { ...option }\n        hideAndFocus()\n      }\n    }\n\n    const selectOrAddOption = () => {\n      if (hoveredOption.value !== null) {\n        selectHoveredOption()\n        return\n      }\n\n      if (allowCreateCheck()) {\n        addNewOption()\n      }\n    }\n\n    const allowCreateCheck = (): boolean => {\n      return !!(props.allowCreate && searchInput.value !== '')\n    }\n\n    const addNewOption = (): void => {\n      if (props.multiple) {\n        if (exceedsMaxSelections()) { return }\n\n        const hasAddedOption: boolean = valueComputed.value.some((value: any) => value === searchInput.value)\n\n        // Do not change valueComputed if option already exist and allow create is `unique`\n        if (!(props.allowCreate === 'unique' && hasAddedOption)) {\n          valueComputed.value = [...valueComputed.value, searchInput.value]\n        }\n      } else {\n        valueComputed.value = searchInput.value\n      }\n\n      searchInput.value = ''\n    }\n\n    // Hovered options\n\n    const hoveredOption = ref(null as any)\n\n    const selectHoveredOption = () => {\n      if (!showDropdownContent.value) {\n        // We can not select options if they are hidden\n        showDropdown()\n        return\n      }\n\n      selectOption(hoveredOption.value)\n    }\n\n    const hoverPreviousOption = () => {\n      optionList.value?.hoverPreviousOption()\n    }\n\n    const hoverNextOption = () => {\n      optionList.value?.hoverNextOption()\n    }\n\n    // Dropdown content\n\n    const showDropdownContent = ref(false)\n\n    const showDropdownContentComputed = computed({\n      get: () => {\n        return showDropdownContent.value\n      },\n      set: (show: boolean) => {\n        show\n          ? showDropdown()\n          : hideDropdown()\n      },\n    })\n\n    const closeOnContentClick = computed(() => {\n      return !(props.multiple || props.searchable || props.allowCreate)\n    })\n\n    const showDropdown = () => {\n      showDropdownContent.value = true\n      scrollToSelected()\n      focusSearchOrOptions()\n    }\n\n    const hideDropdown = () => {\n      showDropdownContent.value = false\n      validate()\n    }\n\n    const toggleDropdown = () => {\n      if (showDropdownContent.value) {\n        hideAndFocus()\n      } else {\n        showDropdown()\n      }\n    }\n\n    // Focus and keyboard navigation\n\n    const isFocusedComputed = computed(() => {\n      // If we show dropdown content that means select is focused\n      return isFocused.value || showDropdownContent.value\n    })\n\n    const onSelectClick = () => {\n      if (props.disabled) {\n        return\n      }\n\n      toggleDropdown()\n    }\n\n    const focusSelect = () => {\n      select.value?.focus()\n    }\n\n    const hideAndFocus = (): void => {\n      hideDropdown()\n      focusSelect()\n    }\n\n    const focusSearchBar = () => {\n      searchBar.value?.focus()\n    }\n\n    const focusOptionList = () => {\n      optionList.value?.focus()\n    }\n\n    const focusSearchOrOptions = () => {\n      nextTick(() => {\n        if (showSearchInput.value) {\n          focusSearchBar()\n        } else { focusOptionList() }\n      })\n    }\n\n    /** @public */\n    const focus = (): void => {\n      if (props.disabled) {\n        return\n      }\n      isFocused.value = true\n    }\n\n    /** @public */\n    const blur = (): void => {\n      isFocused.value = false\n      validate()\n    }\n\n    /** @public */\n    const reset = (): void => {\n      if (props.multiple) {\n        valueComputed.value = Array.isArray(props.clearValue) ? props.clearValue : []\n      } else {\n        valueComputed.value = props.clearValue\n      }\n\n      searchInput.value = ''\n      context.emit('clear')\n    }\n\n    const tabIndexComputed = computed(() => {\n      return props.disabled ? -1 : props.tabindex\n    })\n\n    const scrollToSelected = (): void => {\n      const selected = valueComputed.value\n      const nothingSelected = !selected.length && typeof selected !== 'object'\n\n      if (nothingSelected) {\n        return\n      }\n\n      const scrollTo = Array.isArray(selected) ? selected[selected.length - 1] : selected\n      hoveredOption.value = scrollTo\n      nextTick(() => optionList.value?.scrollToOption(scrollTo))\n    }\n\n    // Hinted search\n\n    let hintedSearchQuery = ''\n    let hintedSearchQueryTimeoutIndex!: any\n    const navigationKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', ' ']\n\n    // Hinted search - hover option if you typing it's value on select without search-bar\n    const onHintedSearch = (event: KeyboardEvent) => {\n      if (navigationKeys.some(key => key === event.key)) {\n        return\n      }\n\n      const isLetter: boolean = event.key.length === 1\n      const isDeleteKey: boolean = event.key === 'Backspace' || event.key === 'Delete'\n\n      clearTimeout(hintedSearchQueryTimeoutIndex)\n\n      if (isDeleteKey) {\n        // Remove last letter from query\n        hintedSearchQuery = hintedSearchQuery ? hintedSearchQuery.slice(0, -1) : ''\n      } else if (isLetter) {\n        // Add every new letter to the query\n        hintedSearchQuery += event.key\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = hintedSearchQuery\n        return\n      }\n\n      // Search for an option that matches the query\n      if (hintedSearchQuery) {\n        const appropriateOption = props.options.find(option => getText(option).toLowerCase().startsWith(hintedSearchQuery.toLowerCase()))\n        if (appropriateOption) {\n          hoveredOption.value = appropriateOption\n        }\n      }\n\n      hintedSearchQueryTimeoutIndex = setTimeout(() => { hintedSearchQuery = '' }, 1000)\n    }\n\n    return {\n      select,\n      optionList,\n      focusOptionList,\n      focus,\n      blur,\n      reset,\n      onSelectClick,\n      hideAndFocus,\n      searchBar,\n      focusSearchBar,\n      searchInput,\n      showSearchInput,\n      hoveredOption,\n      tabIndexComputed,\n      valueComputed,\n      valueComputedString,\n      showClearIcon,\n      toggleIcon,\n      showDropdownContent,\n      computedErrorMessages,\n      computedError,\n      filteredOptions,\n      checkIsOptionSelected,\n      closeOnContentClick,\n      selectOption,\n      selectOrAddOption,\n      selectHoveredOption,\n      hoverPreviousOption,\n      hoverNextOption,\n      showDropdownContentComputed,\n      showDropdown,\n      hideDropdown,\n      toggleDropdown,\n      isFocusedComputed,\n      colorComputed,\n      onHintedSearch,\n      getText,\n      getTrackBy,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources/resources\";\n@import 'variables';\n\n.va-select {\n  cursor: var(--va-select-cursor);\n\n  .va-input {\n    cursor: var(--va-select-cursor);\n  }\n\n  .va-input__append {\n    display: flex;\n    justify-content: center;\n    align-content: center;\n  }\n\n  &__dropdown {\n    .va-dropdown__anchor {\n      display: block;\n    }\n\n    .va-dropdown__content {\n      overflow: hidden;\n      border-bottom-right-radius: var(--va-select-dropdown-border-radius);\n      border-bottom-left-radius: var(--va-select-dropdown-border-radius);\n      border-top-right-radius: 0;\n      border-top-left-radius: 0;\n      box-shadow: var(--va-select-box-shadow);\n      padding: 0;\n    }\n\n    .va-select__dropdown__content {\n      background: var(--va-select-dropdown-background);\n      overflow-y: auto;\n\n      @include va-scroll(var(--va-select-scroll-color));\n    }\n  }\n}\n</style>\n"],"names":["_mergeProps","success","_ctx","messages","error","style","width","_createVNode","ref","position","disabled","maxHeight","fixed","trigger","class","stateful","anchor","tabindex","onFocus","onBlur","onKeydown","onClick","_createCommentVNode","clearable","clearableIcon","color","label","placeholder","loading","outline","bordered","focused","readonly","onCleared","appendInner","_renderSlot","name","value","focus","onKeyup","_createBlock","id","removable","hoveredOption","options","search","noOptionsText","onSelectOption","onNoPreviousOptionToHover"],"mappings":"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"}