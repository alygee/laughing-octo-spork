{"version":3,"file":"TextareaMixin.js","sources":["../../../../../src/components/va-input/helpers/TextareaMixin.ts"],"sourcesContent":["import { watch } from 'vue'\nimport { mixins, prop, Vue, setup } from 'vue-class-component'\nimport calculateNodeHeight from '../calculateNodeHeight'\nimport { warn } from '../../../services/utils'\nimport { StatefulMixin } from '../../../mixins/StatefulMixin/StatefulMixin'\n\nclass Props {\n  // autosize = prop<boolean>({ type: Boolean, default: false })\n  // minRows = prop<number>({\n  //   type: Number,\n  //   default: null,\n  //   validator: (val: number) => {\n  //     if (!(val > 0 && (val | 0) === val)) {\n  //       return warn(`\\`minRows\\` must be a positive integer greater than 0, but ${val} is provided`)\n  //     }\n  //     return true\n  //   },\n  // })\n\n  // maxRows = prop<number>({\n  //   type: Number,\n  //   validator: (val: number) => {\n  //     if (!(val > 0 && (val | 0) === val)) {\n  //       return warn(`\\`minRows\\` must be a positive integer greater than 0, but ${val} is provided`)\n  //     }\n  //     return true\n  //   },\n  //   default: null,\n  // })\n\n  type = prop<string>({ type: String, default: 'text' })\n  label = prop<string>({ type: String, default: '' })\n}\n\nconst PropsMixin = Vue.with(Props)\n\nexport class TextareaMixin extends mixins(StatefulMixin, PropsMixin) {\n  context = setup(() => {\n    // watch(() => this.$props.modelValue, () => {\n    //   // only for textarea\n    //   if (this.isTextarea) {\n    //     this.adjustHeight()\n    //   }\n    // })\n\n    return {}\n  })\n\n  get isTextarea (): boolean {\n    return this.type === 'textarea'\n  }\n\n  adjustHeight (): void {\n    // TODO: Implement this later with composition api\n    // if (!this.autosize || !this.isTextarea) {\n    //   return\n    // }\n\n    // const minRows = this.minRows || 1\n    // const maxRows = this.maxRows || Number.MAX_SAFE_INTEGER\n    // const textareaStyles = calculateNodeHeight(this.$refs.textarea, false, minRows, maxRows)\n\n    // // We modify DOM directly instead of using reactivity because the whole adjustHeight method takes place\n    // // each time the value of textarea is modified, so there's no real need in an additional layer of reactivity.\n    // // The operation is basically reactive though implicitly.\n    // Object.assign((this as any).$refs.textarea.style, textareaStyles)\n  }\n\n  // mounted (): void {\n  //   this.adjustHeight()\n  // }\n}\n"],"names":["PropsMixin","Vue","with","constructor","this","prop","type","String","default","TextareaMixin","mixins","StatefulMixin","setup","isTextarea","adjustHeight"],"mappings":"wNAkCA,MAAMA,EAAaC,EAAIC,KA5BvB,MAAAC,cAwBEC,UAAOC,EAAa,CAAEC,KAAMC,OAAQC,QAAS,SAC7CJ,WAAQC,EAAa,CAAEC,KAAMC,OAAQC,QAAS,cAKnCC,UAAsBC,EAAOC,EAAeX,IAAzDG,kCACEC,aAAUQ,GAAM,KAQP,MAGTC,iBACE,MAAqB,aAAdT,KAAKE,KAGdQ"}