{"version":3,"file":"VaTimeline.vue_vue&type=script&lang.js","sources":["../../../../src/components/va-timeline/VaTimeline.vue"],"sourcesContent":["<script>\nimport { h, Fragment } from 'vue'\n\nconst getPropsData = (slot) => {\n  return slot && slot.props\n}\n\nconst getIsActive = (slot) => {\n  const propsData = getPropsData(slot)\n  if (!propsData) {\n    return false\n  }\n\n  return !!(propsData.active || propsData.active === '') // Check because for boolean empty prop means true\n}\n\n/**\n* Slot can be Vue Fragment generated by v-for.\n* If slot `type` proprerty is Vue Fragment Symbol return true\n*/\nconst isVueFragment = (slot) => slot.type === Fragment\n\nconst isEmptyArray = (arr) => arr && arr.length === 0\n\n/* Returns correct slots without v-for vue fragment */\nfunction getSlots (context) {\n  const defaultSlots = context.$slots.default()\n\n  if (!defaultSlots || isEmptyArray(defaultSlots)) { return [] }\n  if (isVueFragment(defaultSlots[0])) { return defaultSlots[0].children }\n\n  return defaultSlots\n}\n\nconst processSlots = (context) => {\n  const slots = getSlots(context)\n\n  slots.forEach((slot, index) => {\n    const propsData = getPropsData(slot)\n\n    if (!propsData) {\n      return\n    }\n\n    // Pass down vertical prop.\n    propsData.vertical = context.$props.vertical\n\n    if (context.$props.centered) {\n      // Every second slot will be inverted\n      propsData.inverted = !!(index % 2)\n    }\n\n    if (index === 0) {\n      propsData.isFirst = true\n    }\n    if (index === slots.length - 1) {\n      propsData.isLast = true\n    }\n\n    const currentSlotActive = propsData.active || propsData.active === '' // Check because for boolean empty prop means true.\n\n    // For inactive slot we props are default.\n    if (!currentSlotActive) {\n      return\n    }\n\n    if (index === 0) {\n      propsData.activePrevious = currentSlotActive\n    }\n\n    if (index === slots.length - 1) {\n      propsData.activeNext = currentSlotActive\n    }\n\n    const previousSlotActive = getIsActive(slots[index - 1])\n    if (previousSlotActive) {\n      propsData.activePrevious = true\n    }\n\n    const nextSlotActive = getIsActive(slots[index + 1])\n    if (nextSlotActive) {\n      propsData.activeNext = true\n    }\n  })\n\n  return slots\n}\n\nconst $root = 'va-timeline'\n\nexport default {\n  name: $root,\n  props: {\n    vertical: Boolean,\n    centered: Boolean,\n    alignTop: Boolean,\n  },\n  render () {\n    const classes = {\n      [$root]: true,\n      [`${$root}--vertical`]: this.$props.vertical,\n      [`${$root}--align-top`]: this.$props.alignTop,\n    }\n    if (this.$data.staticClass) {\n      classes[this.$data.staticClass] = true\n    }\n\n    return h(\n      'div',\n      {\n        class: classes,\n        style: this.$data.staticStyle,\n      },\n      processSlots(this),\n    )\n  },\n}\n</script>\n\n<style lang=\"scss\">\n.va-timeline {\n  display: var(--va-timeline-display);\n  flex-wrap: var(--va-timeline-flex-wrap);\n\n  &--vertical {\n    flex-direction: var(--va-timeline-vertical-flex-direction);\n    padding-left: var(--va-timeline-vertical-padding-left);\n    padding-right: var(--va-timeline-vertical-padding-right);\n\n    /* min-width: 300px; */\n  }\n\n  &--align-top {\n    .va-timeline-item__before,\n    .va-timeline-item__after {\n      flex: 0;\n    }\n  }\n\n  .va-timeline-item {\n    flex: 1;\n  }\n\n  .va-timeline-item--vertical {\n    .va-timeline-separator--vertical .va-timeline-separator__line {\n      &:first-child {\n        flex: 0 0 1rem;\n      }\n    }\n\n    &.va-timeline-item--is-first {\n      .va-timeline-separator--vertical .va-timeline-separator__line {\n        &:first-child {\n          flex-basis: 2rem;\n        }\n      }\n\n      .va-timeline-item__after,\n      .va-timeline-item__before {\n        padding-top: 2rem;\n      }\n    }\n\n    &.va-timeline-item--vertical.va-timeline-item--is-last {\n      .va-timeline-item__after,\n      .va-timeline-item__before {\n        padding-bottom: 2rem;\n      }\n    }\n  }\n}\n</style>\n"],"names":["getPropsData","slot","props","getIsActive","propsData","active","getSlots","context","defaultSlots","$slots","default","arr","length","type","Fragment","children","$root","name","vertical","Boolean","centered","alignTop","render","classes","this","$props","$data","staticClass","h","class","style","staticStyle","slots","forEach","index","inverted","isFirst","isLast","currentSlotActive","activePrevious","activeNext","processSlots"],"mappings":"sCAGA,MAAMA,EAAgBC,GACbA,GAAQA,EAAKC,MAGhBC,EAAeF,IACnB,MAAMG,EAAYJ,EAAaC,GAC/B,QAAKG,MAIKA,EAAUC,QAA+B,KAArBD,EAAUC,SAY1C,SAASC,EAAUC,GACjB,MAAMC,EAAeD,EAAQE,OAAOC,UAEpC,OAAKF,IANeG,EAMcH,IANgB,IAAfG,EAAIC,OAMmB,GACxCJ,EAAa,GATIK,OAASC,EASCN,EAAa,GAAGO,SAEtDP,EATY,IAACG,EAYtB,MAsDMK,EAAQ,cAEd,MAAe,CACbC,KAAMD,EACNd,MAAO,CACLgB,SAAUC,QACVC,SAAUD,QACVE,SAAUF,SAEZG,SACE,MAAMC,EAAU,CACdP,CAACA,IAAQ,EACT,CAAC,GAAGA,eAAoBQ,KAAKC,OAAOP,SACpC,CAAC,GAAGF,gBAAqBQ,KAAKC,OAAOJ,UAMvC,OAJIG,KAAKE,MAAMC,cACbJ,EAAQC,KAAKE,MAAMC,cAAe,GAG7BC,EACL,MACA,CACEC,MAAON,EACPO,MAAON,KAAKE,MAAMK,aA7EL,CAACxB,IACpB,MAAMyB,EAAQ1B,EAASC,GAkDvB,OAhDAyB,EAAMC,SAAQ,CAAChC,EAAMiC,KACnB,MAAM9B,EAAYJ,EAAaC,GAE/B,IAAKG,EACH,OAIFA,EAAUc,SAAWX,EAAQkB,OAAOP,SAEhCX,EAAQkB,OAAOL,WAEjBhB,EAAU+B,YAAcD,EAAQ,IAGpB,IAAVA,IACF9B,EAAUgC,SAAU,GAElBF,IAAUF,EAAMpB,OAAS,IAC3BR,EAAUiC,QAAS,GAGrB,MAAMC,EAAoBlC,EAAUC,QAA+B,KAArBD,EAAUC,OAGnDiC,IAIS,IAAVJ,IACF9B,EAAUmC,eAAiBD,GAGzBJ,IAAUF,EAAMpB,OAAS,IAC3BR,EAAUoC,WAAaF,GAGEnC,EAAY6B,EAAME,EAAQ,MAEnD9B,EAAUmC,gBAAiB,GAGNpC,EAAY6B,EAAME,EAAQ,MAE/C9B,EAAUoC,YAAa,OAIpBR,GA4BHS,CAAajB"}