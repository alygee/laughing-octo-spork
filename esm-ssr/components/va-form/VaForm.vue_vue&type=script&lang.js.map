{"version":3,"file":"VaForm.vue_vue&type=script&lang.js","sources":["../../../../src/components/va-form/VaForm.vue"],"sourcesContent":["<template>\n  <component\n    class=\"va-form\"\n    :is=\"tag\"\n  >\n    <slot />\n  </component>\n</template>\n\n<script lang=\"ts\">\nimport { inject, provide } from 'vue'\nimport { Options, mixins, prop, Vue, setup } from 'vue-class-component'\nimport { FormComponentMixin } from '../../mixins/FormComponent/FormComponentMixin'\nimport { FormProvider, FormServiceKey } from './consts'\n\nclass FormProps {\n  autofocus = prop<boolean>({ type: Boolean, default: false })\n  tag = prop<string>({ type: String, default: 'div' })\n}\n\nconst FormPropsMixin = Vue.with(FormProps)\n\ninterface UniversalFormBlock {\n  reset: () => void;\n  some: () => void;\n}\n\n@Options({\n  name: 'VaForm',\n  emits: ['validation'],\n})\nexport default class VaForm extends mixins(\n  FormPropsMixin,\n) {\n  nestedFormElements: (FormComponentMixin | VaForm)[] = [];\n\n  parentFormProvider: FormProvider | Record<string, unknown> = setup(() => {\n    return {\n      ...inject(FormServiceKey, undefined),\n    }\n  })\n\n  formProvider = setup(() => {\n    const onChildMounted = (child: FormComponentMixin | VaForm) => this.childMountedHandler(child)\n    const onChildUnmounted = (removableChild: FormComponentMixin | VaForm) => this.childUnmountedHandler(removableChild)\n\n    const formProvider = {\n      onChildMounted,\n      onChildUnmounted,\n    }\n\n    provide(FormServiceKey, formProvider)\n\n    return formProvider\n  })\n\n  childMountedHandler (child: FormComponentMixin | VaForm) {\n    this.nestedFormElements.push(child)\n  }\n\n  childUnmountedHandler (removableChild: FormComponentMixin | VaForm) {\n    this.nestedFormElements = this.nestedFormElements.filter(child => child !== removableChild)\n  }\n\n  mounted () {\n    if (Object.keys(this.parentFormProvider).length) {\n      // @ts-ignore\n      this.parentFormProvider.onChildMounted(this)\n    }\n    if (this.autofocus) {\n      this.$nextTick(() => {\n        this.focus()\n      })\n    }\n  }\n\n  unmounted () {\n    if (Object.keys(this.parentFormProvider).length) {\n      // @ts-ignore\n      this.parentFormProvider.onChildUnmounted(this)\n    }\n  }\n\n  // public methods\n  reset () {\n    this.nestedFormElements\n      .filter(({ reset }) => reset)\n      .forEach((item) => {\n        item.reset()\n      })\n  }\n\n  resetValidation () {\n    this.nestedFormElements\n      .filter(({ resetValidation }) => resetValidation)\n      .forEach((item: any) => {\n        item.resetValidation()\n      })\n  }\n\n  focus () {\n    const focusableElement = this.nestedFormElements.find(({ focus }) => focus)\n    if (focusableElement) {\n      focusableElement.focus()\n    }\n  }\n\n  focusInvalid () {\n    const invalidComponent = this.nestedFormElements\n      // @ts-ignore\n      .filter(({ hasError }) => hasError)\n      // @ts-ignore\n      .find((item) => item.hasError())\n\n    if (invalidComponent) {\n      invalidComponent.focus()\n    } else {\n      // @ts-ignore\n      const nestedFormComponents = this.nestedFormElements.filter(({ nestedFormElements }) => nestedFormElements)\n      // @ts-ignore\n      nestedFormComponents.forEach(formComponent => formComponent.focusInvalid())\n    }\n  }\n\n  validate () { // NOTE: temporarily synchronous validation\n    let formValid = true\n    this.nestedFormElements\n      .filter(({ validate }) => validate)\n      .forEach((child) => {\n        const isValidChild = child.validate()\n        if (!isValidChild) {\n          formValid = false\n        }\n      })\n    this.$emit('validation', formValid)\n    return formValid\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.va-form {\n}\n</style>\n"],"names":["FormPropsMixin","Vue","with","constructor","this","prop","type","Boolean","default","String","VaForm","mixins","setup","inject","FormServiceKey","undefined","formProvider","onChildMounted","child","childMountedHandler","onChildUnmounted","removableChild","childUnmountedHandler","provide","nestedFormElements","push","filter","mounted","Object","keys","parentFormProvider","length","autofocus","$nextTick","focus","unmounted","reset","forEach","item","resetValidation","focusableElement","find","focusInvalid","invalidComponent","hasError","formComponent","validate","formValid","$emit","Options","name","emits"],"mappings":"6QAoBA,MAAMA,EAAiBC,EAAIC,KAL3B,MAAAC,cACEC,eAAYC,EAAc,CAAEC,KAAMC,QAASC,SAAS,IACpDJ,SAAMC,EAAa,CAAEC,KAAMG,OAAQD,QAAS,WAc9C,IAAqBE,EAArB,cAAoCC,EAClCX,IADFG,kCAGEC,wBAAsD,GAEtDA,wBAA6DQ,GAAM,KAC1D,IACFC,EAAOC,OAAgBC,OAI9BX,kBAAeQ,GAAM,KACnB,MAGMI,EAAe,CACnBC,eAJsBC,GAAuCd,KAAKe,oBAAoBD,GAKtFE,iBAJwBC,GAAgDjB,KAAKkB,sBAAsBD,IASrG,OAFAE,EAAQT,EAAgBE,GAEjBA,KAGTG,oBAAqBD,GACnBd,KAAKoB,mBAAmBC,KAAKP,GAG/BI,sBAAuBD,GACrBjB,KAAKoB,mBAAqBpB,KAAKoB,mBAAmBE,QAAOR,GAASA,IAAUG,IAG9EM,UACMC,OAAOC,KAAKzB,KAAK0B,oBAAoBC,QAEvC3B,KAAK0B,mBAAmBb,eAAeb,MAErCA,KAAK4B,WACP5B,KAAK6B,WAAU,KACb7B,KAAK8B,WAKXC,YACMP,OAAOC,KAAKzB,KAAK0B,oBAAoBC,QAEvC3B,KAAK0B,mBAAmBV,iBAAiBhB,MAK7CgC,QACEhC,KAAKoB,mBACFE,QAAO,EAAGU,MAAAA,KAAYA,IACtBC,SAASC,IACRA,EAAKF,WAIXG,kBACEnC,KAAKoB,mBACFE,QAAO,EAAGa,gBAAAA,KAAsBA,IAChCF,SAASC,IACRA,EAAKC,qBAIXL,QACE,MAAMM,EAAmBpC,KAAKoB,mBAAmBiB,MAAK,EAAGP,MAAAA,KAAYA,IACjEM,GACFA,EAAiBN,QAIrBQ,eACE,MAAMC,EAAmBvC,KAAKoB,mBAE3BE,QAAO,EAAGkB,SAAAA,KAAeA,IAEzBH,MAAMH,GAASA,EAAKM,aAEvB,GAAID,EACFA,EAAiBT,YACZ,CAEwB9B,KAAKoB,mBAAmBE,QAAO,EAAGF,mBAAAA,KAAyBA,IAEnEa,SAAQQ,GAAiBA,EAAcH,kBAIhEI,WACE,IAAIC,GAAY,EAUhB,OATA3C,KAAKoB,mBACFE,QAAO,EAAGoB,SAAAA,KAAeA,IACzBT,SAASnB,IACaA,EAAM4B,aAEzBC,GAAY,MAGlB3C,KAAK4C,MAAM,aAAcD,GAClBA,IAxGUrC,KAJpBuC,EAAQ,CACPC,KAAM,SACNC,MAAO,CAAC,iBAEWzC,SAAAA"}