{"version":3,"file":"VaInfiniteScroll.vue_vue&type=template&id=b399cd12&lang.js","sources":["../../../../src/components/va-infinite-scroll/VaInfiniteScroll.vue?vue&type=template&id=b399cd12&lang.js"],"sourcesContent":["<template>\n  <component\n    :is=\"$props.tag\"\n    class=\"va-infinite-scroll\"\n    :class=\"{'va-infinite-scroll--reversed': $props.reverse}\"\n  >\n    <slot\n      name=\"default\"\n      ref=\"content\"\n    />\n    <div\n      class=\"va-infinite-scroll__spinner\"\n      :class=\"{'va-infinite-scroll__spinner--invisible': !fetching}\"\n      ref=\"loadingSlotContainer\"\n    >\n      <slot\n        name=\"loading\"\n        v-if=\"!$props.disabled\"\n      >\n        <div\n          ref=\"defaultSpinner\"\n          class=\"va-infinite-scroll__spinner__default\"\n        >\n          <va-progress-circle\n            size=\"small\"\n            :thickness=\"0.15\"\n            :color=\"error ? colors.danger : colors.primary\"\n            indeterminate\n          />\n        </div>\n      </slot>\n    </div>\n  </component>\n</template>\n\n<script lang=\"ts\">\nimport { debounce } from 'lodash-es'\nimport { watch } from 'vue'\nimport { mixins, Options, prop, Vue } from 'vue-class-component'\n\nimport { sleep } from '../../services/utils'\nimport ColorMixin from '../../services/color-config/ColorMixin'\nimport { VaProgressCircle } from '../va-progress-bar'\n\nclass InfiniteScrollProps {\n  load = prop<Function>({ type: Function, required: true })\n  offset = prop<number>({ type: Number, default: 500 })\n  reverse = prop<boolean>({ type: Boolean, default: false })\n  disabled = prop<boolean>({ type: Boolean, default: false })\n  scrollTarget = prop<Element | string>({ type: [Object, String], default: null })\n  debounce = prop<number>({ type: Number, default: 100 })\n  tag = prop<string>({ type: String, default: 'div' })\n}\n\nconst InfiniteScrollPropsMixin = Vue.with(InfiniteScrollProps)\n\n@Options({\n  name: 'VaInfiniteScroll',\n  components: { VaProgressCircle },\n})\nexport default class VaInfiniteScroll extends mixins(\n  ColorMixin,\n  InfiniteScrollPropsMixin,\n) {\n  index = 0\n  fetching = false\n  error = false\n  initialHeight: any = null\n  debouncedLoad!: any\n  scrollTop!: number\n\n  created () {\n    watch(() => this.$props.disabled, (value) => {\n      if (value) {\n        this.stop()\n      } else {\n        this.resume()\n      }\n    })\n\n    watch(() => this.$props.debounce, (value) => {\n      this.setDebounce(value as number)\n    })\n  }\n\n  get scrollAmount () {\n    return this.$props.offset as number + 1 + this.$el.offsetHeight\n  }\n\n  get scrollTargetElement () {\n    return typeof this.$props.scrollTarget === 'string'\n      ? document.querySelector(this.$props.scrollTarget)\n      : this.$props.scrollTarget || this.$el.parentElement\n  }\n\n  get colors () {\n    return {\n      primary: this.theme.getColor('primary', '#23e066'),\n      danger: this.theme.getColor('danger', '#e34b4a'),\n    }\n  }\n\n  onLoad () {\n    if (this.$props.disabled || this.error || this.fetching) {\n      return\n    }\n\n    const { scrollTop, scrollHeight } = this.scrollTargetElement\n    const containerHeight = this.scrollTargetElement.offsetHeight\n    const isLoadingRequired = this.$props.reverse\n      ? scrollTop < this.scrollAmount\n      : scrollTop + containerHeight + this.scrollAmount >= scrollHeight\n    if (!isLoadingRequired) { return }\n\n    this.fetching = true\n    this.scrollTop = this.$props.reverse ? 0 : (this as any).$el.offsetHeight\n    this.initialHeight = this.$el.offsetHeight\n    this.$props.load()\n      .then(this.finishLoading).catch(this.onError)\n  }\n\n  onError () {\n    this.stop()\n    this.error = true\n    this.fetching = true\n    sleep(1200)\n      .then(this.stopErrorDisplay)\n      .then(this.resume)\n  }\n\n  stopErrorDisplay () {\n    this.scrollTargetElement.scrollTop = this.$props.reverse\n      ? this.scrollAmount\n      : this.scrollTargetElement.scrollTop - this.scrollTargetElement.offsetHeight - this.scrollAmount\n    this.error = false\n    this.fetching = false\n  }\n\n  finishLoading () {\n    this.fetching = false\n    if (this.$props.reverse) {\n      this.scrollTargetElement.scrollTop = this.$el.offsetHeight - this.initialHeight\n    }\n  }\n\n  resume () {\n    if (!this.$props.disabled) {\n      this.scrollTargetElement.addEventListener(\n        'scroll',\n        this.debouncedLoad,\n        {\n          passive: true,\n        },\n      )\n    }\n  }\n\n  stop () {\n    if (this.$props.disabled) {\n      return\n    }\n\n    this.fetching = false\n    this.scrollTargetElement.removeEventListener(\n      'scroll',\n      this.debouncedLoad,\n      { passive: true },\n    )\n  }\n\n  setDebounce (value: number) {\n    this.debouncedLoad = debounce(this.onLoad, value)\n  }\n\n  mounted () {\n    if (!this.scrollTargetElement) {\n      return\n    }\n    this.scrollTargetElement.style.overflowY = 'scroll'\n\n    if (this.$props.reverse) {\n      this.scrollTargetElement.scrollTop = this.scrollTargetElement.scrollHeight\n    }\n\n    this.setDebounce(this.$props.debounce as number)\n    this.scrollTargetElement.addEventListener('scroll', this.debouncedLoad, {\n      passive: true,\n    })\n  }\n\n  beforeUnmount () {\n    if (!this.$props.disabled) {\n      this.scrollTargetElement.removeEventListener(\n        'scroll',\n        this.debouncedLoad,\n        { passive: true },\n      )\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"../../styles/resources/resources\";\n@import 'variables';\n\n.va-infinite-scroll {\n  display: var(--va-infinite-scroll-display);\n  flex-direction: var(--va-infinite-scroll-flex-direction);\n\n  &--reversed {\n    flex-direction: var(--va-infinite-scroll-reversed-flex-direction);\n  }\n\n  &__spinner {\n    &__default {\n      @include flex-center();\n\n      width: var(--va-infinite-scroll-spinner-default-width);\n      min-height: var(--va-infinite-scroll-spinner-default-min-height);\n    }\n\n    &--invisible {\n      visibility: hidden !important;\n    }\n\n    @include flex-center();\n  }\n}\n</style>\n"],"names":["_ctx","tag","_mergeProps","class","reverse","_renderSlot","ref","_createVNode","disabled","size","thickness","color","danger","primary","indeterminate"],"mappings":"yWAESA,SAAOC,KADdC,GAEEC,OAAM,qDACmCH,SAAOI,0BAHlD,yBAKEC,sBAEEC,IAAI,YAENC,SACEJ,OAAM,yEAC8CH,aACpDM,IAAI,yBAIKN,SAAOQ,sBAFhBH,8BAAA,KAIEE,SACED,IAAI,iBACJH,MAAM,yCAENI,KACEE,KAAK,QACJC,UAAW,IACXC,MAAOX,QAAQA,SAAOY,OAASZ,SAAOa,QACvCC,cAAA,sEAnBNR,IAAI,0GAIgDN,qEAK3CA,SAAOQ,6IAOVC,KAAK,QACJC,UAAW,IACXC,MAAOX,QAAQA,SAAOY,OAASZ,SAAOa,QACvCC,cAAA"}