import{resolveComponent as e,mergeProps as l,withCtx as a,createVNode as o,openBlock as t,createBlock as r,Fragment as p,renderList as s,renderSlot as d}from"vue";import{ssrRenderComponent as u,ssrRenderAttr as i,ssrRenderList as n,ssrRenderSlot as b}from"@vue/server-renderer";function c(c,m,V,$){const f=e("va-input-wrapper"),x=e("va-radio"),g=e("va-checkbox"),v=e("va-switch");m(u(f,l({error:c.computedError,"error-messages":c.computedErrorMessages,"error-count":c.$props.errorCount},$),{default:a(((e,l,a,m)=>{if(!l)return[o("ul",{class:"va-option-list__list",id:c.$props.id},[(t(!0),r(p,null,s(c.$props.options,((e,l)=>(t(),r("li",{key:c.getKey(e)},[d(c.$slots,"default",{props:{option:e,isDisabled:c.isDisabled,name:c.$props.name,color:c.$props.color,leftLabel:c.$props.leftLabel,getText:c.getText,selectedValue:c.selectedValue,index:l}},(()=>["radio"===c.$props.type?(t(),r(x,{key:0,ref:"input",option:c.getValue(e),disabled:c.isDisabled(e),name:c.$props.name,color:c.$props.color,"left-label":c.$props.leftLabel,label:c.getText(e),modelValue:c.selectedValue,"onUpdate:modelValue":e=>c.selectedValue=e,tabindex:l},null,8,["option","disabled","name","color","left-label","label","modelValue","onUpdate:modelValue","tabindex"])):"checkbox"===c.$props.type?(t(),r(g,{key:1,ref:"input",modelValue:c.selectedValue,"onUpdate:modelValue":e=>c.selectedValue=e,label:c.getText(e),disabled:c.isDisabled(e),"left-label":c.$props.leftLabel,"array-value":c.getValue(e),color:c.$props.color,name:c.$props.name},null,8,["modelValue","onUpdate:modelValue","label","disabled","left-label","array-value","color","name"])):(t(),r(v,{key:2,ref:"input",modelValue:c.selectedValue,"onUpdate:modelValue":e=>c.selectedValue=e,label:c.getText(e),disabled:c.isDisabled(e),"left-label":c.$props.leftLabel,"array-value":c.getValue(e),color:c.$props.color,name:c.$props.name},null,8,["modelValue","onUpdate:modelValue","label","disabled","left-label","array-value","color","name"]))]))])))),128))],8,["id"])];l(`<ul class="va-option-list__list"${i("id",c.$props.id)}${m}>\x3c!--[--\x3e`),n(c.$props.options,((e,o)=>{l(`<li${m}>`),b(c.$slots,"default",{props:{option:e,isDisabled:c.isDisabled,name:c.$props.name,color:c.$props.color,leftLabel:c.$props.leftLabel,getText:c.getText,selectedValue:c.selectedValue,index:o}},(()=>{"radio"===c.$props.type?l(u(x,{ref:"input",option:c.getValue(e),disabled:c.isDisabled(e),name:c.$props.name,color:c.$props.color,"left-label":c.$props.leftLabel,label:c.getText(e),modelValue:c.selectedValue,"onUpdate:modelValue":e=>c.selectedValue=e,tabindex:o},null,a,m)):"checkbox"===c.$props.type?l(u(g,{ref:"input",modelValue:c.selectedValue,"onUpdate:modelValue":e=>c.selectedValue=e,label:c.getText(e),disabled:c.isDisabled(e),"left-label":c.$props.leftLabel,"array-value":c.getValue(e),color:c.$props.color,name:c.$props.name},null,a,m)):l(u(v,{ref:"input",modelValue:c.selectedValue,"onUpdate:modelValue":e=>c.selectedValue=e,label:c.getText(e),disabled:c.isDisabled(e),"left-label":c.$props.leftLabel,"array-value":c.getValue(e),color:c.$props.color,name:c.$props.name},null,a,m))}),l,a,m),l("</li>")})),l("\x3c!--]--\x3e</ul>")})),_:3},V))}export{c as ssrRender};
//# sourceMappingURL=VaOptionList.vue_vue&type=template&id=69ca68d9&lang.js.map
