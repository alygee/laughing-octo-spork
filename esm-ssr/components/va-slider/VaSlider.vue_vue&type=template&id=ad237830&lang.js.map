{"version":3,"file":"VaSlider.vue_vue&type=template&id=ad237830&lang.js","sources":["../../../../src/components/va-slider/VaSlider.vue?vue&type=template&id=ad237830&lang.js"],"sourcesContent":["<template>\n  <div\n    class=\"va-slider\"\n    :class=\"sliderClass\"\n  >\n    <div\n      class=\"va-slider__input-wrapper\"\n      v-if=\"vertical ? $slots.append : $slots.prepend\"\n    >\n      <slot :name=\"vertical ? 'append' : 'prepend'\" />\n    </div>\n    <span\n      v-if=\"($slots.label || label) && !invertLabel\"\n      :style=\"labelStyles\"\n      class=\"va-input__label\"\n    >\n      <slot name=\"label\">\n        {{ label }}\n      </slot>\n    </span>\n    <span\n      v-if=\"vertical ? iconAppend : iconPrepend\"\n      class=\"va-input__label\"\n    >\n      <va-icon\n        :name=\"vertical ? iconAppend : iconPrepend\"\n        :color=\"colorComputed\"\n        :size=\"16\"\n      />\n    </span>\n    <div\n      class=\"va-slider__container\"\n      ref=\"sliderContainer\"\n      @mousedown=\"clickOnContainer\"\n      @mouseup=\"hasMouseDown = false\"\n    >\n      <div\n        class=\"va-slider__track\"\n        :style=\"trackStyles\"\n      />\n      <template v-if=\"pins\">\n        <div\n          v-for=\"(pin, key) in pinsCol\"\n          :key=\"key\"\n          class=\"va-slider__mark\"\n          :class=\"{ 'va-slider__mark--active': checkActivePin(pin) }\"\n          :style=\"getPinStyles(pin)\"\n        />\n      </template>\n      <template v-if=\"isRange\">\n        <div\n          ref=\"process\"\n          class=\"va-slider__track va-slider__track--selected\"\n          :class=\"{'va-slider__track--active': isFocused}\"\n          :style=\"processedStyles\"\n          @mousedown=\"moveStart($event, null)\"\n        />\n        <div\n          v-for=\"order in (this.vertical ? [1, 0] : [0, 1])\"\n          :key=\"'dot' + order\"\n          :ref=\"'dot' + order\"\n          class=\"va-slider__handler\"\n          :class=\"dotClass[order]\"\n          :style=\"dottedStyles[order]\"\n          @mousedown=\"(moveStart($event, order), setMouseDown($event, order + 1))\"\n          @touchstart=\"moveStart($event, order)\"\n          @focus=\"isFocused = true, currentSliderDotIndex = order\"\n          @blur=\"isFocused = false\"\n          :tabindex=\"(!disabled && !readonly) && 0\"\n        >\n          <div\n            v-if=\"isActiveDot(order)\"\n            :style=\"{ backgroundColor: colorComputed }\"\n            class=\"va-slider__handler__dot--focus\"\n          />\n          <div\n            v-if=\"trackLabelVisible\"\n            :style=\"labelStyles\"\n            class=\"va-slider__handler__dot--value\"\n          >\n            {{ val[order] }}\n          </div>\n        </div>\n      </template>\n      <template v-else>\n        <div\n          ref=\"process\"\n          class=\"va-slider__track va-slider__track--selected\"\n          :class=\"{'va-slider__track--active': isFocused}\"\n          :style=\"processedStyles\"\n          @mousedown=\"moveStart($event, 0)\"\n        />\n        <div\n          ref=\"dot\"\n          class=\"va-slider__handler\"\n          :class=\"dotClass\"\n          :style=\"dottedStyles\"\n          @mousedown=\"(moveStart($event), setMouseDown($event))\"\n          @touchstart=\"(moveStart($event), setMouseDown($event))\"\n          @focus=\"isFocused = true\"\n          @blur=\"isFocused = false\"\n          :tabindex=\"(!this.disabled && !this.readonly) && 0\"\n        >\n          <div\n            v-if=\"isActiveDot(0)\"\n            class=\"va-slider__handler__dot--focus\"\n            :style=\"{ backgroundColor: colorComputed }\"\n          />\n          <div\n            v-if=\"trackLabelVisible\"\n            :style=\"labelStyles\"\n            class=\"va-slider__handler__dot--value\"\n          >\n            {{ trackLabel || val }}\n          </div>\n        </div>\n      </template>\n    </div>\n    <span\n      v-if=\"vertical ? iconPrepend : iconAppend\"\n      class=\"va-input__label--inverse\"\n    >\n      <va-icon\n        :name=\"vertical ? iconPrepend : iconAppend\"\n        :color=\"colorComputed\"\n        :size=\"16\"\n      />\n    </span>\n    <span\n      v-if=\"($slots.label || label) && invertLabel\"\n      :style=\"labelStyles\"\n      class=\"va-input__label va-input__label--inverse\"\n    >\n      <slot name=\"label\">\n        {{ label }}\n      </slot>\n    </span>\n    <div\n      class=\"va-slider__input-wrapper\"\n      v-if=\"vertical ? $slots.prepend : $slots.append\"\n    >\n      <slot :name=\"vertical ? 'prepend' : 'append'\" />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { watch } from 'vue'\nimport { Options, mixins, Vue, prop, setup } from 'vue-class-component'\n\nimport { Ref } from '../../utils/decorators'\nimport ColorMixin from '../../services/color-config/ColorMixin'\nimport { getHoverColor } from '../../services/color-config/color-functions'\nimport { validateSlider } from './validateSlider'\nimport VaIcon from '../va-icon'\n\nclass SliderProps {\n  range = prop<boolean>({ type: Boolean, default: false })\n  modelValue = prop<number | number[]>({\n    type: [Number, Array],\n    default: () => [],\n  })\n  trackLabel = prop<string>({ type: String, default: '' })\n  color = prop<string>({ type: String, default: 'primary' })\n  trackColor = prop<string>({ type: String, default: '' })\n  labelColor = prop<string>({ type: String, default: '' })\n  trackLabelVisible = prop<boolean>({ type: Boolean, default: false })\n  min = prop<number>({ type: Number, default: 0 })\n  max = prop<number>({ type: Number, default: 100 })\n  step = prop<number>({ type: Number, default: 1 })\n  label = prop<string>({ type: String, default: '' })\n  invertLabel = prop<boolean>({ type: Boolean, default: false })\n  disabled = prop<boolean>({ type: Boolean, default: false })\n  readonly = prop<boolean>({ type: Boolean, default: false })\n  pins = prop<boolean>({ type: Boolean, default: false })\n  iconPrepend = prop<string>({ type: String, default: '' })\n  iconAppend = prop<string>({ type: String, default: '' })\n  vertical = prop<boolean>({ type: Boolean, default: false })\n  showTrack = prop<boolean>({ type: Boolean, default: true })\n}\n\nconst SliderPropsMixin = Vue.with(SliderProps)\n\n@Options({\n  name: 'VaSlider',\n  components: { VaIcon },\n  emits: ['drag-start', 'drag-end', 'change', 'update:modelValue'],\n})\nexport default class VaSlider extends mixins(\n  ColorMixin,\n  SliderPropsMixin,\n) {\n  @Ref('dot') readonly dot!: HTMLElement\n  @Ref('dot0') readonly dot0!: HTMLElement\n  @Ref('dot1') readonly dot1!: HTMLElement\n  @Ref('sliderContainer') readonly sliderContainer!: HTMLElement\n\n  isFocused = false\n  flag = false\n  size = 0\n  currentValue = this.modelValue\n  currentSliderDotIndex = 0\n  isComponentExists = false\n  hasMouseDown = false\n\n  context = setup(() => {\n    watch([\n      () => this.val,\n      () => this.$props.step,\n      () => this.$props.min,\n      () => this.$props.max,\n    ], ([value, step, min, max]) => {\n      // @ts-ignore\n      validateSlider(value, step, min, max)\n    })\n\n    watch(() => this.hasMouseDown, (hasMouseDown) => {\n      if (hasMouseDown) {\n        document.documentElement.style.cursor = 'grabbing'\n      } else {\n        document.documentElement.style.cursor = ''\n      }\n    })\n\n    return {}\n  })\n\n  get pinPositionStyle (): 'bottom' | 'left' {\n    return this.vertical ? 'bottom' : 'left'\n  }\n\n  get trackSizeStyle (): 'height' | 'width' {\n    return this.vertical ? 'height' : 'width'\n  }\n\n  get moreToLess () {\n    // @ts-ignore\n    return this.val[1] - this.step < this.val[0]\n  }\n\n  get lessToMore () {\n    // @ts-ignore\n    return this.val[0] + this.step > this.val[1]\n  }\n\n  get sliderClass () {\n    return {\n      'va-slider--active': this.isFocused,\n      'va-slider--disabled': this.disabled,\n      'va-slider--readonly': this.readonly,\n      'va-slider--horizontal': !this.vertical,\n      'va-slider--vertical': this.vertical,\n    }\n  }\n\n  get dotClass () {\n    if (this.range) {\n      return [\n        { 'va-slider__handler--inactive': !this.isFocused },\n        { 'va-slider__handler--inactive': !this.isFocused },\n      ]\n    }\n\n    return {\n      'va-slider__handler--on-focus': !this.range && (this.flag || this.isFocused),\n      'va-slider__handler--inactive': !this.isFocused,\n    }\n  }\n\n  get labelStyles () {\n    return {\n      color: this.labelColor ? this.computeColor(this.labelColor) : this.colorComputed,\n    }\n  }\n\n  get trackStyles () {\n    return {\n      backgroundColor: this.trackColor\n        ? this.computeColor(this.trackColor)\n        : getHoverColor(this.colorComputed),\n    }\n  }\n\n  get processedStyles () {\n    const validatedValue = this.limitValue(this.modelValue)\n\n    if (this.range) {\n      const val0 = ((validatedValue[0] - this.min) / (this.max - this.min)) * 100\n      const val1 = ((validatedValue[1] - this.min) / (this.max - this.min)) * 100\n\n      return {\n        [this.pinPositionStyle]: `${val0}%`,\n        [this.trackSizeStyle]: `${val1 - val0}%`,\n        backgroundColor: this.colorComputed,\n        visibility: this.showTrack ? 'visible' : 'hidden',\n      }\n    } else {\n      const val = ((validatedValue - this.min) / (this.max - this.min)) * 100\n\n      return {\n        [this.trackSizeStyle]: `${val}%`,\n        backgroundColor: this.colorComputed,\n        visibility: this.showTrack ? 'visible' : 'hidden',\n      }\n    }\n  }\n\n  get dottedStyles () {\n    const validatedValue = this.limitValue(this.modelValue)\n\n    if (this.range) {\n      const val0 = ((validatedValue[0] - this.min) / (this.max - this.min)) * 100\n      const val1 = ((validatedValue[1] - this.min) / (this.max - this.min)) * 100\n\n      return [\n        {\n          [this.pinPositionStyle]: `${val0}%`,\n          backgroundColor: this.isActiveDot(0) ? this.colorComputed : '#ffffff',\n          borderColor: this.colorComputed,\n        },\n        {\n          [this.pinPositionStyle]: `${val1}%`,\n          backgroundColor: this.isActiveDot(1) ? this.colorComputed : '#ffffff',\n          borderColor: this.colorComputed,\n        },\n      ]\n    } else {\n      const val = ((validatedValue - this.min) / (this.max - this.min)) * 100\n\n      return {\n        [this.pinPositionStyle]: `${val}%`,\n        backgroundColor: this.isActiveDot(0) ? this.colorComputed : '#ffffff',\n        borderColor: this.colorComputed,\n      }\n    }\n  }\n\n  get val ():any {\n    return this.$props.modelValue\n  }\n\n  set val (val) {\n    if (!this.range) {\n      val = this.limitValue(val)\n    }\n    if (!this.flag) {\n      this.$emit('change', val)\n    }\n    this.$emit('update:modelValue', val)\n  }\n\n  get total () {\n    return (this.max - this.min) / this.step\n  }\n\n  get gap () {\n    return this.size / this.total\n  }\n\n  get multiple () {\n    const decimals = `${this.step}`.split('.')[1]\n    return decimals ? Math.pow(10, decimals.length) : 1\n  }\n\n  get interval () {\n    // @ts-ignore\n    return this.modelValue[1] - this.modelValue[0]\n  }\n\n  get pinsCol () {\n    return (this.max / this.step) - 1\n  }\n\n  get position (): any {\n    // @ts-ignore\n    return this.isRange ? [(this.modelValue[0] - this.min) / this.step * this.gap, (this.modelValue[1] - this.min) / this.step * this.gap] : ((this.modelValue - this.min) / this.step * this.gap)\n  }\n\n  get limit () {\n    return [0, this.size]\n  }\n\n  get valueLimit () {\n    return [this.min, this.max]\n  }\n\n  get isRange () {\n    return Array.isArray(this.modelValue)\n  }\n\n  get propsForValidation () {\n    return {\n      value: this.val,\n      step: this.step,\n      min: this.min,\n      max: this.max,\n    }\n  }\n\n  bindEvents () {\n    document.addEventListener('mousemove', this.moving)\n    document.addEventListener('touchmove', this.moving)\n    document.addEventListener('mouseup', this.moveEnd)\n    document.addEventListener('mouseleave', this.moveEnd)\n    document.addEventListener('touchcancel', this.moveEnd)\n    document.addEventListener('touchend', this.moveEnd)\n    document.addEventListener('keydown', this.moveWithKeys)\n  }\n\n  unbindEvents () {\n    document.removeEventListener('mousemove', this.moving)\n    document.removeEventListener('touchmove', this.moving)\n    document.removeEventListener('mouseup', this.moveEnd)\n    document.removeEventListener('mouseleave', this.moveEnd)\n    document.removeEventListener('touchcancel', this.moveEnd)\n    document.removeEventListener('touchend', this.moveEnd)\n    document.removeEventListener('keydown', this.moveWithKeys)\n  }\n\n  isActiveDot (index: number) {\n    if ((!this.isFocused && !this.flag) || this.disabled || this.readonly) {\n      return false\n    }\n\n    return this.range ? this.currentSliderDotIndex === index : this.currentSliderDotIndex === 0\n  }\n\n  setMouseDown (e: Event, index: number = this.currentSliderDotIndex) {\n    if (!this.readonly && !this.disabled) {\n      this.hasMouseDown = Boolean(index) || true\n    }\n  }\n\n  moveStart (e: Event, index: number = this.currentSliderDotIndex) {\n    if (!index) {\n      if (!this.range) {\n        index = 0\n      } else {\n        const pos = this.getPos(e)\n        index = pos > ((this.position[1] - this.position[0]) / 2 + this.position[0]) ? 1 : 0\n      }\n    }\n\n    if (this.isRange) {\n      this.currentSliderDotIndex = index\n    }\n\n    this.flag = true\n    this.$emit('drag-start')\n  }\n\n  moving (e: any) {\n    if (!this.hasMouseDown) {\n      return\n    }\n    if (!this.disabled && !this.readonly) {\n      if (!this.flag) {\n        return false\n      }\n\n      if (e.type === 'touchmove') {\n        this.setValueOnPos(this.getPos(e.touches[0]))\n      } else {\n        e.preventDefault()\n        this.setValueOnPos(this.getPos(e))\n      }\n    }\n  }\n\n  moveEnd () {\n    if (!this.disabled && !this.readonly) {\n      if (this.flag) {\n        this.$emit('drag-end')\n        // @ts-ignore\n        this.$emit('change', this.range ? Array.from(this.modelValue) : this.modelValue)\n      } else {\n        return false\n      }\n      this.flag = false\n      this.hasMouseDown = false\n    }\n  }\n\n  moveWithKeys (event: any) {\n    // don't do anything if a dot isn't focused or if the slider's disabled or readonly\n    // @ts-ignore\n    if (![this.dot0, this.dot1, this.dot].includes(document.activeElement as any)) {\n      return\n    }\n    if (this.disabled || this.readonly) {\n      return\n    }\n\n    /*\n      where: where to move\n        0 - to left\n        1 - to right\n\n      which: which dot to move (only makes sense when isRange is true)\n        0 - left dot\n        1 - right dot\n      */\n    const moveDot = (isRange: boolean, where: number, which: number) => {\n      if (isRange) {\n        // @ts-ignore\n        if (!this.pins) {\n          return this.val.splice(which, 1, this.val[which] + (where ? this.step : -this.step))\n        }\n\n        // how many value units one pin occupies\n        const onePinInterval = (this.max - this.min) / (this.pinsCol + 1)\n        // how many full pins are to the left of the dot now\n        // @ts-ignore\n        const fullPinsNow = this.val[which] / onePinInterval | 0\n        // the value of the nearest pin\n        let nearestPinVal = fullPinsNow * onePinInterval\n\n        // @ts-ignore\n        if (this.val[which] !== nearestPinVal) { // if the dot's not pinned already\n          nearestPinVal += where ? onePinInterval : 0 // take one more pin if moving right\n          // @ts-ignore\n          this.val.splice(which, 1, nearestPinVal)\n        } else {\n          // @ts-ignore\n          this.val.splice(which, 1, this.val[which] + (where ? this.step : -this.step))\n        }\n      } else {\n        if (!this.pins) {\n          // @ts-ignore\n          this.val += where ? this.step : -this.step\n          return\n        }\n\n        // how many value units one pin occupies\n        const onePinInterval = (this.max - this.min) / (this.pinsCol + 1)\n        // how many full pins are to the left of the dot now\n        // @ts-ignore\n        const fullPinsNow = this.val / onePinInterval | 0\n        // the value of the nearest pin\n        let nearestPinVal = fullPinsNow * onePinInterval\n\n        if (this.val !== nearestPinVal) { // if the dot's not pinned already\n          nearestPinVal += where ? onePinInterval : 0 // take one more pin if moving right\n          this.val = nearestPinVal\n        } else {\n          this.val += where ? this.step : -this.step\n        }\n      }\n    }\n\n    const arrowKeyCodes = [37, 38, 39, 40] // LEFT, UP, RIGHT, DOWN\n    const [CODE_LEFT, CODE_UP, CODE_RIGHT, CODE_DOWN] = arrowKeyCodes\n    // prevent page scroll\n    if (arrowKeyCodes.indexOf(event.keyCode) !== -1) {\n      event.preventDefault()\n    }\n\n    if (this.range) {\n      const isVerticalDot0More = (event: any) =>\n        this.vertical && this.dot0 === document.activeElement && event.keyCode === CODE_UP\n      const isVerticalDot0Less = (event: any) => this.vertical && this.dot0 === document.activeElement && event.keyCode === CODE_DOWN\n      const isVerticalDot1More = (event: any) => this.vertical && this.dot1 === document.activeElement && event.keyCode === CODE_UP\n      const isVerticalDot1Less = (event: any) => this.vertical && this.dot1 === document.activeElement && event.keyCode === CODE_DOWN\n      const isHorizontalDot0Less = (event: any) =>\n        !this.vertical && this.dot0 === document.activeElement && event.keyCode === CODE_LEFT\n      const isHorizontalDot0More = (event: any) =>\n        !this.vertical && this.dot0 === document.activeElement && event.keyCode === CODE_RIGHT\n      const isHorizontalDot1Less = (event: any) =>\n        !this.vertical && this.dot1 === document.activeElement && event.keyCode === CODE_LEFT\n      const isHorizontalDot1More = (event: any) =>\n        !this.vertical && this.dot1 === document.activeElement && event.keyCode === CODE_RIGHT\n\n      switch (true) {\n        // @ts-ignore\n      case (isVerticalDot1Less(event) || isHorizontalDot1Less(event)) && this.moreToLess && this.val[0] !== this.min:\n          // @ts-ignore\n        this.dot0.focus()\n        moveDot(true, 0, 0)\n        break\n        // @ts-ignore\n      case (isVerticalDot0More(event) || isHorizontalDot0More(event)) && this.lessToMore && this.val[1] !== this.max:\n          // @ts-ignore\n        this.dot0.focus()\n        moveDot(true, 1, 1)\n        break\n        // @ts-ignore\n      case (isVerticalDot0Less(event) || isHorizontalDot0Less(event)) && this.val[0] !== this.min:\n        moveDot(true, 0, 0)\n        break\n        // @ts-ignore\n      case (isVerticalDot1More(event) || isHorizontalDot1More(event)) && this.val[1] !== this.max:\n        moveDot(true, 1, 1)\n        break\n        // @ts-ignore\n      case (isVerticalDot1Less(event) || isHorizontalDot1Less(event)) && this.val[1] !== this.min:\n        moveDot(true, 0, 1)\n        break\n        // @ts-ignore\n      case (isVerticalDot0More(event) || isHorizontalDot0More(event)) && this.val[0] !== this.max:\n        moveDot(true, 1, 0)\n        break\n      default:\n        break\n      }\n    } else {\n      if (this.vertical) {\n        if (event.keyCode === CODE_DOWN) {\n          moveDot(false, 0, 0)\n        }\n        if (event.keyCode === CODE_UP) {\n          moveDot(false, 1, 0)\n        }\n      } else {\n        if (event.keyCode === CODE_LEFT) {\n          moveDot(false, 0, 0)\n        }\n        if (event.keyCode === CODE_RIGHT) {\n          moveDot(false, 1, 0)\n        }\n      }\n    }\n  }\n\n  // wrapClick (e) {\n  //   if (!this.disabled && !this.readonly && !this.flag) {\n  //     const pos = this.getPos(e)\n  //     if (this.isRange) {\n  //       this.currentSliderDotIndex = pos > ((this.position[1] - this.position[0]) / 2 + this.position[0]) ? 1 : 0\n  //     }\n  //     this.setValueOnPos(pos)\n  //     if (this.pins) {\n  //       if (this.isRange) {\n  //         if (this.currentValue[0] % this.step !== 0) {\n  //           this.currentValue[0] = this.normalizeValue(this.currentValue[0])\n  //           this.val = [this.currentValue[0], this.val[1]]\n  //         }\n  //         if (this.currentValue[1] % this.step !== 0) {\n  //           this.currentValue[1] = this.normalizeValue(this.currentValue[1])\n  //           this.val = [this.val[0], this.currentValue[1]]\n  //         }\n  //       } else {\n  //         this.currentValue = this.normalizeValue(this.currentValue)\n  //         this.val = this.currentValue\n  //       }\n  //     }\n  //   }\n  // },\n\n  checkActivePin (pin: number) {\n    if (this.isRange) {\n      // @ts-ignore\n      return pin * this.step > this.val[0] && pin * this.step < this.val[1]\n    } else {\n      // @ts-ignore\n      return pin * this.step < this.val\n    }\n  }\n\n  getPinStyles (pin: number) {\n    return {\n      backgroundColor: this.checkActivePin(pin) ? this.colorComputed : getHoverColor(this.colorComputed),\n      [this.pinPositionStyle]: `${pin * this.step}%`,\n      transition: this.hasMouseDown ? 'none' : 'background-color .3s ease-out .1s',\n    }\n  }\n\n  getPos (e: any) {\n    this.getStaticData()\n    // @ts-ignore\n    return this.vertical ? this.offset - e.clientY : e.clientX - this.offset\n  }\n\n  getStaticData () {\n    if (this.sliderContainer) {\n      this.size = this.sliderContainer[this.vertical ? 'offsetHeight' : 'offsetWidth']\n      // @ts-ignore\n      this.offset = (this.sliderContainer.getBoundingClientRect() as Record<string, any>)[this.pinPositionStyle]\n    }\n  }\n\n  getValueByIndex (index: number) {\n    return ((this.step * this.multiple) * index + (this.min * this.multiple)) / this.multiple\n  }\n\n  setCurrentValue (val: any) {\n    const slider = this.currentSliderDotIndex\n    if (this.isRange) {\n      // @ts-ignore\n      if (this.isDiff(this.currentValue[slider], val)) {\n        // @ts-ignore\n        this.currentValue.splice(slider, 1, val)\n        if (slider === 0) {\n          // @ts-ignore\n          this.val = [this.currentValue.splice(slider, 1, val)[0], this.modelValue[1]]\n          this.currentValue = [...this.val]\n        } else {\n          // @ts-ignore\n          this.val = [this.modelValue[0], this.currentValue.splice(slider, 1, val)[0]]\n          this.currentValue = [...this.val]\n        }\n      }\n    } else {\n      if (val < this.min || val > this.max) {\n        return false\n      }\n      if (this.isDiff(this.currentValue, val)) {\n        this.currentValue = val\n        this.val = val\n      }\n    }\n  }\n\n  setValueOnPos (pixelPosition: any) {\n    const range = this.limit\n    const valueRange = this.valueLimit\n\n    // this.setTransform()\n\n    // set focus on current thumb\n    const dotToFocus = this.isRange ? (this.currentSliderDotIndex ? this.dot1 : this.dot0) : this.dot\n    dotToFocus.focus()\n\n    if (pixelPosition >= range[0] && pixelPosition <= range[1]) {\n      if (this.currentSliderDotIndex) {\n        if (pixelPosition <= this.position[0]) {\n          // @ts-ignore\n          this.val[1] = this.val[0]\n          this.currentSliderDotIndex = 0\n        }\n        const v = this.getValueByIndex(Math.round(pixelPosition / this.gap))\n        this.setCurrentValue(v)\n      } else {\n        if (pixelPosition >= this.position[1]) {\n          // @ts-ignore\n          this.val[0] = this.val[1]\n          this.currentSliderDotIndex = 1\n        }\n        const v = this.getValueByIndex(Math.round(pixelPosition / this.gap))\n        this.setCurrentValue(v)\n      }\n    } else if (pixelPosition < range[0]) {\n      this.setCurrentValue(valueRange[0])\n    } else {\n      this.setCurrentValue(valueRange[1])\n    }\n  }\n\n  // setTransform () {\n  //   if (this.isRange) {\n  //     const slider = this.currentSliderDotIndex\n  //     const difference = 100 / (this.max - this.min)\n  //     const val0 = (this.value[0] - this.min) * difference\n  //     const processPosition = `${val0}%`\n\n  //     if (slider === 0) {\n  //       this.dot0.style[this.pinPositionStyle] = `calc(${processPosition} - 8px)`\n  //       this.dot0.focus()\n  //     } else {\n  //       this.dot1.style[this.pinPositionStyle] = `calc(${processPosition} - 8px)`\n  //       this.dot1.focus()\n  //     }\n  //   } else {\n  //     const val = ((this.value - this.min) / (this.max - this.min)) * 100\n\n  //     this.dot.style[this.pinPositionStyle] = `calc(${val} - 8px)`\n  //     this.dot.focus()\n  //   }\n  // }\n\n  // normalizeValue (value: any) {\n  //   const currentRest = value % this.step\n  //   if ((currentRest / this.step) >= 0.5) {\n  //     value = value + (this.step - currentRest)\n  //   } else {\n  //     value = value - currentRest\n  //   }\n  //   return value\n  // }\n\n  limitValue (val: any) {\n    const inRange = (v: any) => {\n      if (v < this.min) {\n        return this.min\n      } else if (v > this.max) {\n        return this.max\n      }\n      return v\n    }\n\n    if (this.isRange) {\n      if (val[0] >= val[1] && this.currentSliderDotIndex === 0) {\n        const v = inRange(val[1])\n        return [v, v]\n      }\n      if (val[0] >= val[1] && this.currentSliderDotIndex === 1) {\n        const v = inRange(val[0])\n        return [v, v]\n      }\n      return val.map((v: any) => inRange(v))\n    } else {\n      return inRange(val)\n    }\n  }\n\n  isDiff (a: any, b: any) {\n    return JSON.stringify(a) !== JSON.stringify(b)\n  }\n\n  clickOnContainer (e: any) {\n    if (this.disabled || this.readonly) {\n      return\n    }\n    const pos = this.getPos(e)\n    if (this.isRange) {\n      this.currentSliderDotIndex = pos > ((this.position[1] - this.position[0]) / 2 + this.position[0]) ? 1 : 0\n    }\n    this.setMouseDown(e, this.currentSliderDotIndex)\n    this.setValueOnPos(pos)\n    this.moveStart(e, this.currentSliderDotIndex)\n  }\n\n  mounted () {\n    this.$nextTick(() => {\n      if (validateSlider(this.modelValue, this.step, this.min, this.max)) {\n        this.getStaticData()\n        this.bindEvents()\n      }\n    })\n  }\n\n  beforeUnmount () {\n    this.unbindEvents()\n  }\n}\n</script>\n\n<style lang='scss'>\n@import \"../../styles/resources/resources\";\n@import 'variables';\n\n.va-slider {\n  display: var(--va-slider-display);\n  align-items: var(--va-slider-align-items);\n\n  &__input-wrapper {\n    position: var(--va-slider-input-wrapper-position);\n    display: var(--va-slider-input-wrapper-display);\n  }\n\n  &__container {\n    position: relative;\n    display: flex;\n    align-items: center;\n    cursor: grab;\n  }\n\n  &__track {\n    position: var(--va-slider-track-position);\n    border-radius: var(--va-slider-track-border-radius);\n    transition: var(--va-slider-track-transition);\n    opacity: var(--va-slider-track-opacity);\n\n    &--active {\n      transition: 0s;\n    }\n  }\n\n  &__track--selected {\n    opacity: 1;\n  }\n\n  &__handler {\n    position: var(--va-slider-handler-position);\n    width: var(--va-slider-handler-width);\n    height: var(--va-slider-handler-height);\n    background: var(--va-slider-handler-background);\n    border: var(--va-slider-handler-border);\n    border-radius: var(--va-slider-handler-border-radius);\n    outline: var(--va-slider-handler-outline);\n    left: var(--va-slider-handler-left);\n    transition: var(--va-slider-handler-transition);\n\n    &__dot--focus {\n      transform: var(--va-slider-dot-transform);\n      display: var(--va-slider-dot-display);\n      width: var(--va-slider-dot-width);\n      height: var(--va-slider-dot-height);\n      position: var(--va-slider-dot-position);\n      border-radius: var(--va-slider-dot-border-radius);\n      opacity: var(--va-slider-dot-opacity);\n      pointer-events: var(--va-slider-dot-pointer-events);\n    }\n\n    &__dot--value {\n      transform: var(--va-slider-dot-value-transform);\n      user-select: var(--va-slider-dot-value-user-select);\n      font-size: var(--va-slider-dot-value-font-size);\n      letter-spacing: var(--va-slider-dot-value-letter-spacing);\n      line-height: var(--va-slider-dot-value-line-height);\n      font-weight: var(--va-slider-dot-value-font-weight);\n      text-transform: var(--va-slider-dot-value-text-transform);\n    }\n  }\n\n  .va-input__label {\n    user-select: var(--va-slider-input-label-user-select);\n    font-size: var(--va-slider-input-label-font-size);\n    letter-spacing: var(--va-slider-input-label-letter-spacing);\n    line-height: var(--va-slider-input-label-line-height);\n    font-weight: var(--va-slider-input-label-font-weight);\n    text-transform: var(--va-slider-input-label-text-transform);\n  }\n\n  .va-input__label--inverse {\n    user-select: var(--va-slider-input-label-inverse-user-select);\n    font-size: var(--va-slider-input-label-inverse-font-size);\n    letter-spacing: var(--va-slider-input-label-inverse-letter-spacing);\n    line-height: var(--va-slider-input-label-inverse-line-height);\n    font-weight: var(--va-slider-input-label-inverse-font-weight);\n    text-transform: var(--va-slider-input-label-inverse-text-transform);\n  }\n\n  &--active {\n    .va-slider__container {\n      cursor: grabbing;\n    }\n  }\n\n  &--disabled {\n    @include va-disabled;\n\n    .va-slider__container {\n      cursor: default;\n    }\n  }\n\n  &--readonly {\n    .va-slider__container {\n      cursor: default;\n    }\n  }\n}\n\n.va-slider--horizontal {\n  .va-slider__input-wrapper {\n    flex-basis: var(--va-slider-horizontal-input-wrapper-flex-basis);\n    flex-grow: var(--va-slider-horizontal-input-wrapper-flex-grow);\n    max-width: var(--va-slider-horizontal-input-wrapper-max-width);\n    margin-right: var(--va-slider-horizontal-input-wrapper-margin-right);\n    min-width: var(--va-slider-horizontal-input-wrapper-min-width);\n\n    &:last-of-type {\n      margin-left: 1rem;\n    }\n  }\n\n  .va-slider {\n    &__container {\n      width: 100%;\n      height: 1.5rem;\n    }\n\n    &__track {\n      height: var(--va-slider-horizontal-track-height);\n      width: var(--va-slider-horizontal-track-width);\n    }\n\n    &__mark {\n      position: absolute;\n      width: 0.125rem;\n      height: 0.75rem;\n    }\n\n    &__handler {\n      transform: var(--va-slider-horizontal-handler-transform);\n\n      &--inactive {\n        transition: left 0.5s ease-out;\n      }\n\n      &__dot--value {\n        position: var(--va-slider-horizontal-dot-value-position);\n        top: var(--va-slider-horizontal-dot-value-top);\n        left: var(--va-slider-horizontal-dot-value-left);\n      }\n    }\n  }\n\n  .va-input__label {\n    margin-right: 1rem;\n  }\n\n  .va-input__label--inverse {\n    margin-left: 1rem;\n  }\n}\n\n.va-slider--vertical {\n  height: var(--va-slider-vertical-height);\n  padding: var(--va-slider-vertical-padding);\n  flex-direction: var(--va-slider-vertical-flex-direction);\n  align-items: var(--va-slider-vertical-align-items);\n\n  .va-input__label {\n    margin-bottom: var(--va-slider-vertical-label-margin-bottom);\n  }\n\n  .va-input__label--inverse {\n    left: var(--va-slider-vertical-label-inverse-left);\n    margin-top: var(--va-slider-vertical-label-inverse-margin-top);\n  }\n\n  .va-slider {\n    &__input-wrapper {\n      flex-basis: var(--va-slider-vertical-input-wrapper-flex-basis);\n      flex-grow: var(--va-slider-vertical-input-wrapper-flex-grow);\n      max-width: var(--va-slider-vertical-input-wrapper-max-width);\n      min-width: var(--va-slider-vertical-input-wrapper-min-width);\n      position: var(--va-slider-vertical-input-wrapper-position);\n      display: var(--va-slider-vertical-input-wrapper-display);\n\n      &:last-of-type {\n        margin-top: 1rem;\n      }\n    }\n\n    &__container {\n      height: 100%;\n      width: 0.5rem;\n    }\n\n    &__track {\n      height: var(--va-slider-vertical-track-height);\n      width: var(--va-slider-vertical-track-width);\n      bottom: var(--va-slider-vertical-track-bottom);\n    }\n\n    &__mark {\n      position: absolute;\n      width: 0.75rem;\n      height: 0.125rem;\n      left: -2px;\n    }\n\n    &__handler {\n      transform: var(--va-slider-vertical-handler-transform);\n\n      &--inactive {\n        transition: bottom 0.5s ease-out;\n      }\n\n      &__dot--value {\n        position: var(--va-slider-vertical-dot-value-position);\n        top: var(--va-slider-vertical-dot-value-top);\n        left: var(--va-slider-vertical-dot-value-left);\n      }\n    }\n  }\n}\n</style>\n"],"names":["_mergeProps","class","_ctx","append","prepend","label","name","color","size","pin","key","vertical","order","disabled","readonly"],"mappings":"8SACEA,GACEC,OAAM,YACEC,yBAIAA,WAAWA,SAAOC,OAASD,SAAOE,iEAE3BF,4EAGNA,SAAOG,QAASH,SAAWA,sDAC1BA,+EAIHA,kCAICA,WAAWA,aAAaA,2DAI3BI,KAAMJ,WAAWA,aAAaA,cAC9BK,MAAOL,gBACPM,KAAM,4HAWCN,0BAEMA,8BAESA,YAAbO,EAAKC,oDAGwBR,iBAAeO,qCAC5CP,eAAaO,0DAGTP,yEAIyBA,0EAC7BA,mDAIcS,sBAAfC,wBAICV,WAASU,uCACTV,eAAaU,SAKpB,YAAYV,aAAaA,mBAGlBA,cAAYU,uCACSV,uFAIrBA,uCACEA,4DAGLA,MAAIU,iJAQ4BV,0EAC7BA,4CAMAA,+CACAA,qBAKP,iBAAiBW,gBAAkBC,iBAG5BZ,4FAEqBA,gDAGrBA,uCACEA,4DAGLA,cAAcA,2EAMjBA,WAAWA,cAAcA,mEAI5BI,KAAMJ,WAAWA,cAAcA,aAC/BK,MAAOL,gBACPM,KAAM,+CAIFN,SAAOG,OAASH,UAAUA,mCACzBA,wGAIHA,qDAKCA,WAAWA,SAAOE,QAAUF,SAAOC,gEAE5BD"}