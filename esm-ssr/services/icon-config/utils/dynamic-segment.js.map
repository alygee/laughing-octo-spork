{"version":3,"file":"dynamic-segment.js","sources":["../../../../../src/services/icon-config/utils/dynamic-segment.ts"],"sourcesContent":["import { regexGroupsValues } from './regex'\n\nconst dynamicSegmentRegex = /{[^}]*}/g // match {any-thing}, {even with space}\n\n/**\n * Replace {anything} to regex (.*) group\n * @example\n * ```\n * \"fa-{code}\" -> \"fa-(.*)\"\n * \"fa-{code}-{suffix}\" -> \"fa-(.*)-(.*)\"\n * ```\n */\nconst dynamicSegmentStringToRegex = (template: string) => {\n  return template.replace(dynamicSegmentRegex, '(.*)')\n}\n\n/**\n Returns content from string in {}\n @example\n ```\n \"fa-{code}-{suffix}\" -> ['code', 'suffix']\n ```\n */\nconst dynamicSegmentsNames = (template: string) => {\n  return (template.match(dynamicSegmentRegex) || []) // 'fa-{code}-{suffix}' -> ['{code}', '{suffix}']\n    .map((g) => g.replace(/{|}/g, '')) // ['{code}', '{suffix}'] -> ['code', 'suffix']\n}\n\n/**\n * Transform template to regex and returns regex group values\n * @example\n * ```\n * \"fa-clock-o\", \"fa-{code}-{suffix}\" -> [\"clock\", \"o\"]\n * ```\n */\nconst dynamicSegmentsValues = (str: string, template: string) => {\n  return regexGroupsValues(str, dynamicSegmentStringToRegex(template))\n}\n\n/**\n * Returns object with param name from template and match value from str\n * @example\n * ```\n * \"fa-phone\", \"fa-{icon code}\" -> { 'icon code': 'phone' }\n * \"fa4 clock-o\", \"fa4 {icon-code}-{suffix}\" -> { 'icon-code': 'clock', 'suffix': 'o' }\n * \"fa4 clock-o\", \"fa4 {icon-code}\" -> { 'icon-code': 'clock-o' }\n * ```\n */\nexport const dynamicSegments = (str: string, template: string) => {\n  const params = dynamicSegmentsNames(template)\n  const values = dynamicSegmentsValues(str, template)\n\n  return params.reduce((acc, paramValue, i) => ({ ...acc, [paramValue]: values[i] }), {})\n}\n\n/**\n * Returns true if match string equals to input `str`\n * @example\n * ```\n * \"vuestic-home-open\", /vuestic-(.*)-o/ -> false\n * \"vuestic-home-open\", /vuestic-(.*)-open/ -> true\n * ```\n */\nconst strictMatch = (str: string, regex: RegExp) => {\n  return (str.match(regex) || [])[0] === str\n}\n\n/**\n * Returns true if str match template\n * @example\n *  ```\n * \"fa-phone\", \"fa-{icon code}\" -> true\n * \"fa4 clock-o\", \"fa4 {icon-code}-{suffix}\" -> true\n * \"fa4 clock-o\", \"fa4 {icon-code}\" -> false\n * ```\n */\nexport const isMatchDynamicSegments = (str: string, template: string) => {\n  const templateRegex = dynamicSegmentStringToRegex(template)\n  return strictMatch(str, new RegExp(templateRegex))\n}\n"],"names":["dynamicSegmentRegex","dynamicSegmentStringToRegex","template","replace","dynamicSegments","str","params","match","map","g","dynamicSegmentsNames","values","regexGroupsValues","dynamicSegmentsValues","reduce","acc","paramValue","i","isMatchDynamicSegments","templateRegex","regex","strictMatch","RegExp"],"mappings":"+CAEA,MAAMA,EAAsB,WAUtBC,EAA+BC,GAC5BA,EAASC,QAAQH,EAAqB,QAmClCI,EAAkB,CAACC,EAAaH,KAC3C,MAAMI,EA1BqB,CAACJ,IACpBA,EAASK,MAAMP,IAAwB,IAC5CQ,KAAKC,GAAMA,EAAEN,QAAQ,OAAQ,MAwBjBO,CAAqBR,GAC9BS,EAfsB,EAACN,EAAaH,IACnCU,EAAkBP,EAAKJ,EAA4BC,IAc3CW,CAAsBR,EAAKH,GAE1C,OAAOI,EAAOQ,QAAO,CAACC,EAAKC,EAAYC,SAAYF,EAAKC,CAACA,GAAaL,EAAOM,MAAO,KAwBzEC,EAAyB,CAACb,EAAaH,KAClD,MAAMiB,EAAgBlB,EAA4BC,GAClD,MAfkB,EAACG,EAAae,KACxBf,EAAIE,MAAMa,IAAU,IAAI,KAAOf,EAchCgB,CAAYhB,EAAK,IAAIiB,OAAOH"}