{"version":3,"file":"icon-helpers.js","sources":["../../../../src/services/icon-config/icon-helpers.ts"],"sourcesContent":["import { merge } from 'lodash-es'\nimport { getGlobalConfig } from '../global-config/global-config'\nimport { isMatchDynamicSegments, dynamicSegments } from './utils/dynamic-segment'\nimport { isMatchRegex, regexGroupsValues } from './utils/regex'\nimport {\n  IconConfig,\n  IconConfiguration,\n  IconConfigurationString,\n  IconConfigurationRegex,\n  isIconConfigurationString,\n  isIconConfigurationRegex,\n  IconProps,\n} from './types'\n\nconst getIconConfig = (): IconConfig => {\n  return getGlobalConfig().icons || []\n}\n\nconst isMatchConfiguration = (iconName: string, iconConfiguration: IconConfiguration) => {\n  if (isIconConfigurationString(iconConfiguration)) {\n    return isMatchDynamicSegments(iconName, iconConfiguration.name)\n  }\n  if (isIconConfigurationRegex(iconConfiguration)) {\n    return isMatchRegex(iconName, iconConfiguration.name)\n  }\n\n  return false\n}\n\nconst resolveIconConfigurationString = (iconName: string, iconConfiguration: IconConfigurationString) => {\n  const args = dynamicSegments(iconName, iconConfiguration.name)\n  return iconConfiguration.resolve && iconConfiguration.resolve(args)\n}\n\nconst resolveIconConfigurationRegex = (iconName: string, iconConfig: IconConfigurationRegex) => {\n  if (iconConfig.name.global) {\n    throw new Error(`Bad icon config with name ${iconConfig.name}. Please, don't use global regex as name.`)\n  }\n  const args = regexGroupsValues(iconName, iconConfig.name) as string[]\n  return iconConfig.resolveFromRegex && iconConfig.resolveFromRegex(...args)\n}\n\nconst resolveIconConfiguration = (iconName: string, iconConfiguration: IconConfiguration): IconProps | undefined => {\n  if (isIconConfigurationString(iconConfiguration)) {\n    return resolveIconConfigurationString(iconName, iconConfiguration)\n  }\n  if (isIconConfigurationRegex(iconConfiguration)) {\n    return resolveIconConfigurationRegex(iconName, iconConfiguration)\n  }\n\n  throw Error('Unknown icon config')\n}\n\nconst findMatchedIconConfiguration = (iconName: string, globalIconConfig: IconConfig, namesToIgnore: string[] = []): IconConfiguration => {\n  const matchedConfig = globalIconConfig.find((config) => {\n    if (namesToIgnore.includes(config.name.toString())) { return false }\n\n    return isMatchConfiguration(iconName, config)\n  })\n\n  if (!matchedConfig) { throw new Error(`Can not find icon config from ${iconName}. Please provide default config.`) }\n\n  return matchedConfig\n}\n\nconst findIconConfiguration = (iconName: string | undefined, globalIconConfig: IconConfig, namesToIgnore: string[] = []): IconConfiguration | undefined => {\n  if (!iconName) { return }\n\n  const matchedIconConfiguration = findMatchedIconConfiguration(iconName, globalIconConfig, namesToIgnore)\n  const resolvedIconConfiguration = merge(resolveIconConfiguration(iconName, matchedIconConfiguration), matchedIconConfiguration)\n\n  namesToIgnore = [...namesToIgnore, matchedIconConfiguration.name.toString()]\n\n  return merge(\n    findIconConfiguration(resolvedIconConfiguration.to, globalIconConfig, namesToIgnore),\n    resolvedIconConfiguration,\n  )\n}\n\n/** Removes name, to, resolveFromRegex and resolve from IconConfiguration */\nconst iconPropsFromIconConfiguration = (iconConfiguration: IconConfiguration): IconProps => {\n  const junkKeys = ['name', 'to', 'resolve', 'resolveFromRegex']\n\n  const configuration: Record<string, string> = iconConfiguration as any\n  junkKeys.forEach((key) => { delete configuration[key] })\n  return configuration\n}\n\nexport const getIconConfiguration = (name: string, iconConfig: IconConfig = getIconConfig()): IconProps => {\n  const configuration = findIconConfiguration(name, iconConfig)\n\n  if (configuration === undefined) { return {} }\n\n  return iconPropsFromIconConfiguration(configuration)\n}\n"],"names":["resolveIconConfiguration","iconName","iconConfiguration","isIconConfigurationString","args","dynamicSegments","name","resolve","resolveIconConfigurationString","isIconConfigurationRegex","iconConfig","global","Error","regexGroupsValues","resolveFromRegex","resolveIconConfigurationRegex","findMatchedIconConfiguration","globalIconConfig","namesToIgnore","matchedConfig","find","config","includes","toString","isMatchDynamicSegments","isMatchRegex","isMatchConfiguration","findIconConfiguration","matchedIconConfiguration","resolvedIconConfiguration","merge","to","getIconConfiguration","getGlobalConfig","icons","getIconConfig","configuration","undefined","forEach","key","iconPropsFromIconConfiguration"],"mappings":"2VAcA,MA4BMA,EAA2B,CAACC,EAAkBC,KAClD,GAAIC,EAA0BD,GAC5B,MAfmC,EAACD,EAAkBC,KACxD,MAAME,EAAOC,EAAgBJ,EAAUC,EAAkBI,MACzD,OAAOJ,EAAkBK,SAAWL,EAAkBK,QAAQH,IAarDI,CAA+BP,EAAUC,GAElD,GAAIO,EAAyBP,GAC3B,MAbkC,EAACD,EAAkBS,KACvD,GAAIA,EAAWJ,KAAKK,OAClB,MAAM,IAAIC,MAAM,6BAA6BF,EAAWJ,iDAE1D,MAAMF,EAAOS,EAAkBZ,EAAUS,EAAWJ,MACpD,OAAOI,EAAWI,kBAAoBJ,EAAWI,oBAAoBV,IAQ5DW,CAA8Bd,EAAUC,GAGjD,MAAMU,MAAM,wBAGRI,EAA+B,CAACf,EAAkBgB,EAA8BC,EAA0B,MAC9G,MAAMC,EAAgBF,EAAiBG,MAAMC,IACvCH,EAAcI,SAASD,EAAOf,KAAKiB,aArCd,EAACtB,EAAkBC,IAC1CC,EAA0BD,GACrBsB,EAAuBvB,EAAUC,EAAkBI,QAExDG,EAAyBP,IACpBuB,EAAaxB,EAAUC,EAAkBI,MAkCzCoB,CAAqBzB,EAAUoB,KAGxC,IAAKF,EAAiB,MAAM,IAAIP,MAAM,iCAAiCX,qCAEvE,OAAOkB,GAGHQ,EAAwB,CAAC1B,EAA8BgB,EAA8BC,EAA0B,MACnH,IAAKjB,EAAY,OAEjB,MAAM2B,EAA2BZ,EAA6Bf,EAAUgB,EAAkBC,GACpFW,EAA4BC,EAAM9B,EAAyBC,EAAU2B,GAA2BA,GAItG,OAFAV,EAAgB,IAAIA,EAAeU,EAAyBtB,KAAKiB,YAE1DO,EACLH,EAAsBE,EAA0BE,GAAId,EAAkBC,GACtEW,IAaSG,EAAuB,CAAC1B,EAAcI,EA1E7B,KACbuB,IAAkBC,OAAS,GAyEwCC,MAC1E,MAAMC,EAAgBT,EAAsBrB,EAAMI,GAElD,YAAsB2B,IAAlBD,EAAsC,GAXL,CAAClC,IACtC,MAEMkC,EAAwClC,EAE9C,MAJiB,CAAC,OAAQ,KAAM,UAAW,oBAGlCoC,SAASC,WAAiBH,EAAcG,MAC1CH,GAQAI,CAA+BJ"}