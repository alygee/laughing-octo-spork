{"version":3,"file":"useFormComponent.js","sources":["../../../src/composables/useFormComponent.ts"],"sourcesContent":["import isString from 'lodash/isString'\nimport isFunction from 'lodash/isFunction'\nimport flatten from 'lodash/flatten'\nimport { computed, inject, onMounted, onUnmounted, PropType, ref } from 'vue'\nimport { FormProvider, FormServiceKey } from '../components/va-form/consts'\n\n/**\n * You could add these props to any component by destructuring them inside props option.\n * @example\n * props: { ...useFormComponentProps, componentsOwnProp, etc. }\n * It's better to add props at the beginning, to make sure that Component own props will be used instead in case of collision\n */\nexport const useFormComponentProps = {\n  rules: { type: Array as PropType<any[]>, default: () => [] },\n  disabled: { type: Boolean as PropType<boolean>, default: false },\n  readonly: { type: Boolean as PropType<boolean>, default: false },\n  success: { type: Boolean as PropType<boolean>, default: false },\n  messages: { type: Array as PropType<any[]>, default: () => [] },\n  error: { type: Boolean as PropType<boolean>, default: false },\n  errorMessages: { type: [Array, String] as PropType<any[] | string> },\n  errorCount: { type: Number as PropType<string | number>, default: 1 },\n  id: { type: [String, Number] as PropType<string | number>, default: undefined },\n  name: { type: [String, Number] as PropType<string | number>, default: undefined },\n\n  modelValue: {\n    default: undefined,\n    validator: () => {\n      throw new Error('ValidateMixin: `modelValue` prop should be defined in component.')\n    },\n  },\n}\n\nconst prepareValidations = (messages: string | any[] = [], callArguments = null) => {\n  if (isString(messages)) {\n    messages = [messages]\n  }\n  return messages\n    .map((message: any) => isFunction(message) ? message(callArguments) : message)\n}\n\nexport function useFormComponent (props: Record<string, any>, context: any) {\n  const hadFocus = ref(false)\n  const isFocused = ref(false)\n  const internalErrorMessages = ref([] as any[])\n  const internalError = ref(false)\n  const isFormComponent = ref(true)\n  const formProvider: FormProvider | undefined = inject(FormServiceKey, undefined)\n\n  onMounted(() => {\n    if (formProvider?.onChildMounted) {\n      formProvider.onChildMounted(context)\n    }\n  })\n\n  onUnmounted(() => {\n    if (formProvider?.onChildUnmounted) {\n      formProvider.onChildUnmounted(context)\n    }\n  })\n\n  /** @public */\n  const validate = () => {\n    computedError.value = false\n    computedErrorMessages.value = []\n\n    if (props.rules && props.rules.length > 0) {\n      prepareValidations(flatten(props.rules), props.modelValue as any)\n        .forEach((validateResult: any) => {\n          if (isString(validateResult)) {\n            computedErrorMessages.value.push(validateResult)\n            computedError.value = true\n          } else if (validateResult === false) {\n            computedError.value = true\n          }\n        })\n    }\n\n    return !computedError.value\n  }\n\n  /** @public */\n  const focus = (): void => {\n    throw new Error('focus method should be implemented in the component')\n  }\n\n  /** @public */\n  const reset = (): void => {\n    throw new Error('reset method should be implemented in the component')\n  }\n\n  const resetValidation = (): void => {\n    computedErrorMessages.value = []\n    computedError.value = false\n  }\n\n  const hasError = (): any => {\n    return computedError.value\n  }\n\n  // eslint-disable-next-line camelcase\n  const ValidateMixin_onBlur = (): void => {\n    isFocused.value = false\n    computedError.value = false\n    validate()\n  }\n\n  const shouldValidateOnBlur = computed(() => {\n    // We want for inputs to validate on blur only after they've been interacted with.\n    return hadFocus.value\n  })\n\n  const computedError = computed({\n    get () {\n      return props.error || internalError.value\n    },\n    set (errorMessage: boolean) {\n      internalError.value = errorMessage\n    },\n  })\n\n  const computedErrorMessages = computed({\n    get () {\n      return props.errorMessages ? prepareValidations(props.errorMessages) : internalErrorMessages.value\n    },\n    set (errorMessages: any[]) {\n      internalErrorMessages.value = errorMessages\n    },\n  })\n\n  return {\n    isFocused,\n    isFormComponent,\n    formProvider,\n    validate,\n    ValidateMixin_onBlur,\n    shouldValidateOnBlur,\n    focus,\n    reset,\n    resetValidation,\n    hasError,\n    computedError,\n    computedErrorMessages,\n  }\n}\n"],"names":["useFormComponentProps","rules","type","Array","default","disabled","Boolean","readonly","success","messages","error","errorMessages","String","errorCount","Number","id","undefined","name","modelValue","validator","Error","prepareValidations","callArguments","isString","map","message","isFunction","useFormComponent","props","context","hadFocus","ref","isFocused","internalErrorMessages","internalError","isFormComponent","formProvider","inject","FormServiceKey","onMounted","onChildMounted","onUnmounted","onChildUnmounted","validate","computedError","value","computedErrorMessages","length","flatten","forEach","validateResult","push","shouldValidateOnBlur","computed","get","set","errorMessage","ValidateMixin_onBlur","focus","reset","resetValidation","hasError"],"mappings":"kTAYaA,EAAwB,CACnCC,MAAO,CAAEC,KAAMC,MAA0BC,QAAS,IAAM,IACxDC,SAAU,CAAEH,KAAMI,QAA8BF,SAAS,GACzDG,SAAU,CAAEL,KAAMI,QAA8BF,SAAS,GACzDI,QAAS,CAAEN,KAAMI,QAA8BF,SAAS,GACxDK,SAAU,CAAEP,KAAMC,MAA0BC,QAAS,IAAM,IAC3DM,MAAO,CAAER,KAAMI,QAA8BF,SAAS,GACtDO,cAAe,CAAET,KAAM,CAACC,MAAOS,SAC/BC,WAAY,CAAEX,KAAMY,OAAqCV,QAAS,GAClEW,GAAI,CAAEb,KAAM,CAACU,OAAQE,QAAsCV,aAASY,GACpEC,KAAM,CAAEf,KAAM,CAACU,OAAQE,QAAsCV,aAASY,GAEtEE,WAAY,CACVd,aAASY,EACTG,UAAW,KACT,MAAM,IAAIC,MAAM,uEAKhBC,EAAqB,CAACZ,EAA2B,GAAIa,EAAgB,QACrEC,EAASd,KACXA,EAAW,CAACA,IAEPA,EACJe,KAAKC,GAAiBC,EAAWD,GAAWA,EAAQH,GAAiBG,cAG1DE,EAAkBC,EAA4BC,GAC5D,MAAMC,EAAWC,GAAI,GACfC,EAAYD,GAAI,GAChBE,EAAwBF,EAAI,IAC5BG,EAAgBH,GAAI,GACpBI,EAAkBJ,GAAI,GACtBK,EAAyCC,EAAOC,OAAgBtB,GAEtEuB,GAAU,MACJH,MAAAA,SAAAA,EAAcI,iBAChBJ,EAAaI,eAAeX,MAIhCY,GAAY,MACNL,MAAAA,SAAAA,EAAcM,mBAChBN,EAAaM,iBAAiBb,MAKlC,MAAMc,EAAW,KACfC,EAAcC,OAAQ,EACtBC,EAAsBD,MAAQ,GAE1BjB,EAAM3B,OAAS2B,EAAM3B,MAAM8C,OAAS,GACtC1B,EAAmB2B,EAAQpB,EAAM3B,OAAQ2B,EAAMV,YAC5C+B,SAASC,IACJ3B,EAAS2B,IACXJ,EAAsBD,MAAMM,KAAKD,GACjCN,EAAcC,OAAQ,IACM,IAAnBK,IACTN,EAAcC,OAAQ,OAKtBD,EAAcC,OA6BlBO,EAAuBC,GAAS,IAE7BvB,EAASe,QAGZD,EAAgBS,EAAS,CAC7BC,IAAG,IACM1B,EAAMlB,OAASwB,EAAcW,MAEtCU,IAAKC,GACHtB,EAAcW,MAAQW,KAIpBV,EAAwBO,EAAS,CACrCC,IAAG,IACM1B,EAAMjB,cAAgBU,EAAmBO,EAAMjB,eAAiBsB,EAAsBY,MAE/FU,IAAK5C,GACHsB,EAAsBY,MAAQlC,KAIlC,MAAO,CACLqB,UAAAA,EACAG,gBAAAA,EACAC,aAAAA,EACAO,SAAAA,EACAc,qBAlC2B,KAC3BzB,EAAUa,OAAQ,EAClBD,EAAcC,OAAQ,EACtBF,KAgCAS,qBAAAA,EACAM,MAvDY,KACZ,MAAM,IAAItC,MAAM,wDAuDhBuC,MAnDY,KACZ,MAAM,IAAIvC,MAAM,wDAmDhBwC,gBAhDsB,KACtBd,EAAsBD,MAAQ,GAC9BD,EAAcC,OAAQ,GA+CtBgB,SA5Ce,IACRjB,EAAcC,MA4CrBD,cAAAA,EACAE,sBAAAA"}