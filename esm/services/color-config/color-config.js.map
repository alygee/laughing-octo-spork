{"version":3,"file":"color-config.js","sources":["../../../../src/services/color-config/color-config.ts"],"sourcesContent":["import { GlobalConfig, setGlobalConfig, getGlobalConfig } from '../global-config/global-config'\nimport {\n  getBoxShadowColor,\n  getHoverColor, getFocusColor,\n  getGradientBackground, isColor,\n  getTextColor, shiftHSLAColor,\n  setHSLAColor,\n} from './color-functions'\n\nexport type CssColor = string\nexport type ColorConfig = { [colorName: string]: CssColor }\n\n// Most default color - fallback when nothing else is found.\nexport const DEFAULT_COLOR = '#000000'\n\nexport const setColors = (colors: ColorConfig): void => {\n  setGlobalConfig((config: GlobalConfig) => ({\n    ...config,\n    colors: { ...config.colors, ...colors },\n  }))\n}\n\nexport const getColors = (): ColorConfig => {\n  return getGlobalConfig().colors || {}\n}\n\n/**\n * Returns color from config by name or return prop if color is it's valid hex, hsl, hsla, rgb or rgba color.\n * @param prop - should be color name or color in hex, hsl, hsla, rgb or rgba format\n * @param defaultColor - this color will be used if prop is invalid\n */\nexport const getColor = (prop?: string, defaultColor: string = DEFAULT_COLOR): CssColor => {\n  const colors = getColors()\n\n  if (!prop) {\n    prop = defaultColor\n  }\n\n  if (colors[prop]) {\n    return colors[prop]\n  }\n\n  if (isColor(prop)) {\n    return prop\n  }\n\n  return defaultColor\n}\n\nexport const colorsToCSSVariable = (colors: { [colorName: string]: string }, prefix = 'va') => {\n  return Object\n    .keys(colors)\n    .filter((key) => colors[key] !== undefined)\n    .reduce((acc, colorName) => ({ ...acc, [`--${prefix}-${colorName}`]: getColor(colors[colorName]) }), {})\n}\n\n// Here expose methods that user wants to use in vue component\nexport const useColors = () => {\n  return {\n    setColors,\n    getColors,\n    getColor,\n    getBoxShadowColor,\n    getHoverColor,\n    getFocusColor,\n    getGradientBackground,\n    getTextColor,\n    shiftHSLAColor,\n    setHSLAColor,\n    colorsToCSSVariable,\n  }\n}\n"],"names":["DEFAULT_COLOR","setColors","colors","setGlobalConfig","config","getColors","getGlobalConfig","getColor","prop","defaultColor","isColor","colorsToCSSVariable","prefix","Object","keys","filter","key","undefined","reduce","acc","colorName","useColors","getBoxShadowColor","getHoverColor","getFocusColor","getGradientBackground","getTextColor","shiftHSLAColor","setHSLAColor"],"mappings":"8RAaaA,EAAgB,UAEhBC,EAAaC,IACxBC,GAAiBC,QACZA,EACHF,OAAQ,IAAKE,EAAOF,UAAWA,QAItBG,EAAY,IAChBC,IAAkBJ,QAAU,GAQxBK,EAAW,CAACC,EAAeC,EAlBX,aAmB3B,MAAMP,EAASG,IAMf,OAJKG,IACHA,EAAOC,GAGLP,EAAOM,GACFN,EAAOM,GAGZE,EAAQF,GACHA,EAGFC,GAGIE,EAAsB,CAACT,EAAyCU,EAAS,OAC7EC,OACJC,KAAKZ,GACLa,QAAQC,QAAwBC,IAAhBf,EAAOc,KACvBE,QAAO,CAACC,EAAKC,SAAoBD,EAAK,CAAC,KAAKP,KAAUQ,KAAcb,EAASL,EAAOkB,OAAgB,IAI5FC,EAAY,KAChB,CACLpB,UAAAA,EACAI,UAAAA,EACAE,SAAAA,EACAe,kBAAAA,EACAC,cAAAA,EACAC,cAAAA,EACAC,sBAAAA,EACAC,aAAAA,EACAC,eAAAA,EACAC,aAAAA,EACAjB,oBAAAA"}