import{merge as e}from"lodash-es";import{getGlobalConfig as o}from"../global-config/global-config.js";import{isMatchDynamicSegments as r,dynamicSegments as n}from"./utils/dynamic-segment.js";import{isMatchRegex as t,regexGroupsValues as i}from"./utils/regex.js";import{isIconConfigurationString as s,isIconConfigurationRegex as m}from"./types.js";const a=(e,o)=>{if(s(o))return((e,o)=>{const r=n(e,o.name);return o.resolve&&o.resolve(r)})(e,o);if(m(o))return((e,o)=>{if(o.name.global)throw new Error(`Bad icon config with name ${o.name}. Please, don't use global regex as name.`);const r=i(e,o.name);return o.resolveFromRegex&&o.resolveFromRegex(...r)})(e,o);throw Error("Unknown icon config")},l=(e,o,n=[])=>{const i=o.find((o=>!n.includes(o.name.toString())&&((e,o)=>s(o)?r(e,o.name):!!m(o)&&t(e,o.name))(e,o)));if(!i)throw new Error(`Can not find icon config from ${e}. Please provide default config.`);return i},f=(o,r,n=[])=>{if(!o)return;const t=l(o,r,n),i=e(a(o,t),t);return n=[...n,t.name.toString()],e(f(i.to,r,n),i)},c=(e,r=(()=>o().icons||[])())=>{const n=f(e,r);return void 0===n?{}:(e=>{const o=e;return["name","to","resolve","resolveFromRegex"].forEach((e=>{delete o[e]})),o})(n)};export{c as getIconConfiguration};
//# sourceMappingURL=icon-helpers.js.map
