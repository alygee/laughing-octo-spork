{"version":3,"file":"VaDateInput.vue_vue&type=template&id=139365e2&lang.js","sources":["../../../../src/components/va-date-input/VaDateInput.vue?vue&type=template&id=139365e2&lang.js"],"sourcesContent":["<template>\n  <div class=\"va-date-input\">\n    <va-dropdown v-model=\"isOpenSync\" :offset=\"[0, 10]\" :close-on-content-click=\"false\">\n      <template #anchor>\n        <slot name=\"input\" v-bind=\"{ valueText, inputProps, color }\">\n          <va-input\n            v-model=\"valueText\"\n            v-bind=\"inputProps\"\n            class=\"va-date-input__input\"\n            @cleared=\"onClear\"\n          >\n            <template #appendInner=\"slotScope\">\n              <slot name=\"appendInner\" v-bind=\"slotScope\">\n                <va-icon\n                  name=\"calendar_today\"\n                  class=\"va-date-picker__icon\"\n                  size=\"small\"\n                  :color=\"color\"\n                />\n              </slot>\n            </template>\n\n            <template\n              v-for=\"(_, name) in $slots\"\n              :key=\"name\"\n              v-slot:[name]=\"slotScope\"\n            >\n              <slot :name=\"name\" v-bind=\"slotScope\" />\n            </template>\n          </va-input>\n        </slot>\n      </template>\n\n      <va-dropdown-content>\n        <va-date-picker v-bind=\"datePickerProps\" v-model=\"valueComputed\">\n          <template v-for=\"(_, name) in $slots\" v-slot:[name]=\"bind\">\n            <slot :name=\"name\" v-bind=\"bind\" />\n          </template>\n        </va-date-picker>\n      </va-dropdown-content>\n    </va-dropdown>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, toRefs, watch } from 'vue'\nimport { useStateful } from '../../mixins/StatefulMixin/cStatefulMixin'\n\nimport { isRange, isSingleDate, isDates } from '../va-date-picker/hooks/model-value-helper'\nimport { useSyncProp } from '../va-date-picker/hooks/sync-prop'\nimport { filterComponentProps, extractComponentProps } from '../va-date-picker/utils/child-props'\nimport { useRangeModelValueGuard } from './hooks/range-model-value-guard'\n\nimport VaDatePicker from '../va-date-picker/VaDatePicker.vue'\nimport VaInput from '../va-input'\nimport { VaDatePickerModelValue } from '../va-date-picker/types/types'\n\nconst VaInputProps = {\n  label: { type: String, required: false },\n  color: { type: String, default: 'primary' },\n  placeholder: { type: String, default: '' },\n  clearable: { type: Boolean, default: false },\n  tabindex: { type: Number, default: 0 },\n  outline: { Boolean, default: false },\n  bordered: { Boolean, default: false },\n  readonly: { Boolean, default: true },\n}\n\nexport default defineComponent({\n  name: 'VaDateInput',\n\n  components: { VaDatePicker, VaInput },\n\n  props: {\n    ...extractComponentProps(VaDatePicker),\n    ...VaInputProps,\n    resetOnClose: { type: Boolean, default: true },\n    isOpen: { type: Boolean },\n    format: { type: Function as PropType<(date: VaDatePickerModelValue | undefined) => string> },\n  },\n\n  emits: [\n    'update:modelValue',\n    'hover:day', 'hover:month',\n    'update:year', 'update:month', 'update:view',\n    'click:month', 'click:day',\n    'update:is-open',\n    'update:text',\n  ],\n\n  setup (props, { emit }) {\n    const { isOpen, resetOnClose } = toRefs(props)\n    const { valueComputed: statefulValue } = useStateful(props, emit)\n    const { syncProp: isOpenSync } = useSyncProp(isOpen, 'is-open', emit, false)\n\n    const isRangeModelValueGuardDisabled = computed(() => !resetOnClose.value)\n    const { valueComputed, reset } = useRangeModelValueGuard(statefulValue, isRangeModelValueGuardDisabled)\n    watch(isOpenSync, (isOpened) => { if (!isOpened && !isRangeModelValueGuardDisabled.value) { reset() } })\n\n    const dateOrNothing = (date: Date | undefined | null) => {\n      if (!date) { return '...' }\n      return date.toDateString()\n    }\n\n    const valueText = computed({\n      get: () => {\n        if (props.format) {\n          return props.format(valueComputed.value)\n        }\n\n        if (!valueComputed.value) { return '' }\n\n        if (isDates(valueComputed.value)) {\n          return valueComputed.value.map((d) => d.toDateString()).join(', ')\n        }\n        if (isSingleDate(valueComputed.value)) {\n          return valueComputed.value.toDateString()\n        }\n        if (isRange(valueComputed.value)) {\n          return dateOrNothing(valueComputed.value.start) + ' ~ ' + dateOrNothing(valueComputed.value.end)\n        }\n\n        throw new Error('VaDatePicker: Invalid model value. Value should be Date, Date[] or { start: Date, end: Date | null }')\n      },\n      set (value: string) {\n        // TODO: Parse value from input\n      },\n    })\n\n    watch(valueText, (text) => emit('update:text', text))\n\n    const onClear = () => { valueComputed.value = undefined }\n\n    return {\n      valueText,\n      valueComputed,\n      isOpenSync,\n      onClear,\n\n      inputProps: filterComponentProps(props, VaInputProps),\n      datePickerProps: filterComponentProps(props, extractComponentProps(VaDatePicker)),\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\" scoped>\n  .va-date-input {\n    display: flex;\n\n    &__icon {\n      cursor: pointer;\n    }\n\n    &__input {\n      cursor: pointer;\n    }\n\n    --va-date-picker-cell-size: 28px;\n  }\n</style>\n"],"names":["class","_createBlock","_hoisted_1","_createVNode","_ctx","offset","anchor","_renderSlot","_mergeProps","onCleared","appendInner","slotScope","name","size","color","_","bind"],"mappings":"sQACOA,MAAM,oKAAXC,QAAAC,GACEC,gBAAsBC,kDAAAA,gBAAaC,OAAQ,OAAU,0BAAwB,IAChEC,UACT,KAAAC,8BAA6BH,uBAAWA,mBAAYA,UAApD,KACED,IAAAK,cACWJ,iDAAAA,gBACDA,cACRJ,MAAM,uBACLS,UAASL,eAECM,mBACTH,yBAAiCI,GAAjC,KACER,KACES,KAAK,iBACLZ,MAAM,uBACNa,KAAK,QACJC,MAAOV,yCAMQA,WAAZW,EAAGH,WAEJA,QAAQD,IAEfJ,WAAaK,EAAcD,8DAMnC,KAAAR,qBACE,KAAAA,IAAAK,gCAAkDJ,qDAAAA,gCAClBA,WAAZW,EAAGH,WAAwBA,QAAQI,IACnDT,WAAaK,EAAcI"}