{"version":3,"file":"VaSelect.vue_vue&type=script&lang.js","sources":["../../../../src/components/va-select/VaSelect.vue"],"sourcesContent":["<template>\n  <va-input-wrapper\n    :success=\"$props.success\"\n    :messages=\"$props.messages\"\n    :error=\"$props.error\"\n    :error-messages=\"computedErrorMessages\"\n    :style=\"{ width: $props.width }\"\n  >\n    <va-dropdown\n      ref=\"dropdown\"\n      v-model=\"showDropdownContentComputed\"\n      :position=\"$props.position\"\n      :disabled=\"$props.disabled\"\n      :max-height=\"$props.maxHeight\"\n      :fixed=\"$props.fixed\"\n      :close-on-content-click=\"closeOnContentClick\"\n      trigger=\"none\"\n      class=\"va-select__dropdown\"\n      keep-anchor-width\n      boundary-body\n      :stateful=false\n    >\n      <template #anchor>\n        <div\n          class=\"va-select\"\n          ref=\"select\"\n          :tabindex=\"tabIndexComputed\"\n          @focus=\"focus\"\n          @blur=\"blur\"\n          @keydown.enter.stop.prevent=\"onSelectClick()\"\n          @keydown.space.stop.prevent=\"onSelectClick()\"\n          @click.prevent=\"onSelectClick()\"\n        >\n          <!-- We show messages outside of dropdown to draw dropdown content under the input -->\n          <va-input\n            :model-value=\"valueComputedString\"\n            :success=\"$props.success\"\n            :error=\"computedError\"\n            :clearable=\"showClearIcon\"\n            :clearableIcon=\"$props.clearableIcon\"\n            :color=\"$props.color\"\n            :label=\"$props.label\"\n            :placeholder=\"$props.placeholder\"\n            :loading=\"$props.loading\"\n            :disabled=\"$props.disabled\"\n            :outline=\"$props.outline\"\n            :bordered=\"$props.bordered\"\n            :focused=\"isFocusedComputed\"\n            :tabindex=\"-1\"\n            readonly\n            @cleared=\"reset\"\n          >\n            <template\n              v-if=\"$slots.prepend\"\n              #prepend\n            >\n              <slot name=\"prepend\" />\n            </template>\n\n            <template\n              v-if=\"$slots.append\"\n              #append\n            >\n              <slot name=\"append\" />\n            </template>\n\n            <template\n              v-if=\"$slots.prependInner\"\n              #prependInner\n            >\n              <slot name=\"prependInner\" />\n            </template>\n\n            <template #appendInner>\n              <div class=\"va-input__append\">\n                <slot\n                  v-if=\"$slots.appendInner\"\n                  name=\"appendInner\"\n                />\n                <va-icon\n                  :color=\"colorComputed\"\n                  :name=\"toggleIcon\"\n                />\n              </div>\n            </template>\n\n            <template v-if=\"$slots.content\" #content=\"{ value, focus }\">\n              <slot name=\"content\" v-bind=\"{ valueString: value, focus, value: valueComputed }\" />\n            </template>\n          </va-input>\n        </div>\n      </template>\n\n      <!-- Stop propagation for enter keyup event, to prevent VaDropdown closing -->\n      <va-dropdown-content\n        @keyup.enter.stop\n        @keydown.esc.prevent=\"hideAndFocus\"\n        @keydown.tab=\"hideDropdown\"\n      >\n        <va-input\n          v-if=\"showSearchInput\"\n          :id=\"$props.id\"\n          ref=\"searchBar\"\n          v-model=\"searchInput\"\n          class=\"va-select__input\"\n          placeholder=\"Search\"\n          removable\n          :name=\"$props.name\"\n          :tabindex=\"tabindex + 1\"\n          :bordered=\"true\"\n          @keydown.up.stop.prevent=\"hoverPreviousOption()\"\n          @keydown.left.stop.prevent=\"hoverPreviousOption()\"\n          @keydown.down.stop.prevent=\"hoverNextOption()\"\n          @keydown.right.stop.prevent=\"hoverNextOption()\"\n          @keydown.enter.prevent=\"selectOrAddOption()\"\n          @focus=\"hoveredOption = null\"\n        />\n        <div class=\"va-select__dropdown__content\">\n          <va-select-option-list\n            ref=\"optionList\"\n            v-model:hoveredOption=\"hoveredOption\"\n            :style=\"{ maxHeight: $props.maxHeight }\"\n            :options=\"filteredOptions\"\n            :selected-value=\"valueComputed\"\n            :get-selected-state=\"checkIsOptionSelected\"\n            :get-text=\"getText\"\n            :get-track-by=\"getTrackBy\"\n            :search=\"searchInput\"\n            :no-options-text=\"$props.noOptionsText\"\n            :color=\"$props.color\"\n            :tabindex=\"tabindex + 1\"\n            @select-option=\"selectOption\"\n            @no-previous-option-to-hover=\"focusSearchBar()\"\n            @keydown.enter.stop.prevent=\"selectHoveredOption()\"\n            @keydown.space.stop.prevent=\"selectHoveredOption()\"\n            @keydown=\"onHintedSearch\"\n          />\n        </div>\n      </va-dropdown-content>\n    </va-dropdown>\n  </va-input-wrapper>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, ref, computed, watch, nextTick } from 'vue'\n\nimport { useSelectableList, useSelectableListProps } from '../../composables/useSelectableList'\nimport { useFormComponent, useFormComponentProps } from '../../composables/useFormComponent'\nimport { useLoadingProps } from '../../composables/useLoading'\nimport { useColor } from '../../composables/useColor'\nimport { useMaxSelections, useMaxSelectionsProps } from '../../composables/useMaxSelections'\n\nimport { warn } from '../../services/utils'\nimport VaDropdown from '../va-dropdown'\nimport VaIcon from '../va-icon'\nimport VaInput, { VaInputWrapper } from '../va-input'\n\nimport VaSelectOptionList from './VaSelectOptionList'\n\ntype DropdownIcon = {\n  open: string,\n  close: string\n}\n\nexport default defineComponent({\n  name: 'VaSelect',\n  components: {\n    VaSelectOptionList,\n    VaIcon,\n    VaDropdown,\n    VaInput,\n    VaInputWrapper,\n  },\n  emits: ['update-search', 'update:modelValue', 'clear'],\n  props: {\n    ...useSelectableListProps,\n    ...useFormComponentProps,\n    ...useLoadingProps,\n    ...useMaxSelectionsProps,\n\n    modelValue: {\n      type: [String, Number, Object, Array] as PropType<string | number | Record<string, any> | any[]>,\n      default: '',\n    },\n\n    // Dropdown position\n    position: {\n      type: String as PropType<string>,\n      default: 'bottom',\n      validator: (position: string) => ['top', 'bottom'].includes(position),\n    },\n\n    allowCreate: {\n      type: [Boolean, String] as PropType<boolean | string>,\n      default: false,\n      validator: (mode: string | boolean) => {\n        return [true, false, 'unique'].includes(mode)\n      },\n    },\n\n    color: { type: String as PropType<string>, default: 'primary' },\n    multiple: { type: Boolean as PropType<boolean>, default: false },\n    searchable: { type: Boolean as PropType<boolean>, default: false },\n    disabled: { type: Boolean as PropType<boolean>, default: false },\n    readonly: { type: Boolean as PropType<boolean>, default: false }, // Probably unused prop! THIS WAS UNUSED! USE\n    separator: { type: String as PropType<string>, default: ', ' },\n    width: { type: String as PropType<string>, default: '100%' },\n    maxHeight: { type: String as PropType<string>, default: '128px' },\n    clearValue: { type: String as PropType<string>, default: '' },\n    noOptionsText: { type: String as PropType<string>, default: 'Items not found' },\n    fixed: { type: Boolean as PropType<boolean>, default: true },\n    clearable: { type: Boolean as PropType<boolean>, default: false },\n    clearableIcon: { type: String as PropType<string>, default: 'highlight_off' },\n    hideSelected: { type: Boolean as PropType<boolean>, default: false },\n    tabindex: { type: Number as PropType<number>, default: 0 },\n    dropdownIcon: {\n      type: [String, Object] as PropType<string | DropdownIcon>,\n      default: (): DropdownIcon => ({\n        open: 'expand_more',\n        close: 'expand_less',\n      }),\n      validator: (value: any) => {\n        if (typeof value === 'string') { return true }\n\n        const isOpenIconString = typeof value.open === 'string'\n        const isCloseIconString = typeof value.close === 'string'\n\n        return isOpenIconString && isCloseIconString\n      },\n    },\n\n    // Input style\n    outline: { type: Boolean as PropType<boolean>, default: false },\n    bordered: { type: Boolean as PropType<boolean>, default: false },\n    label: { type: String as PropType<string>, default: '' },\n    placeholder: { type: String as PropType<string>, default: '' },\n  },\n\n  setup (props, context) {\n    // DOM element or component instance will be assigned to these refs after initial render (template refs and reactive refs are unified in Composition API)\n    const select = ref(null as any)\n    const optionList = ref(null as any)\n    const searchBar = ref(null as any)\n\n    const { getOptionByValue, getValue, getText, getTrackBy } = useSelectableList(props)\n    const { validate, isFocused, computedErrorMessages, computedError } = useFormComponent(props, context)\n    const { colorComputed } = useColor(props)\n\n    const searchInput = ref('')\n    const showSearchInput = computed(() => {\n      return props.searchable || props.allowCreate\n    })\n\n    watch(() => searchInput.value, (value) => {\n      context.emit('update-search', value)\n      hoveredOption.value = null\n    })\n\n    // Select value\n\n    const valueComputed = computed({\n      get () {\n        const value = getOptionByValue(props.modelValue)\n\n        if (props.multiple) {\n          if (!value) {\n            return []\n          }\n\n          if (!Array.isArray(value)) {\n            return [value]\n          }\n\n          return value\n        }\n\n        if (Array.isArray(value)) {\n          warn('Model value should be a string for a single Select.')\n\n          if (value.length) {\n            return value[value.length - 1]\n          }\n        }\n\n        return value\n      },\n\n      set (value: any) {\n        context.emit('update:modelValue', getValue(value))\n      },\n    })\n\n    const valueComputedString = computed((): string => {\n      if (!valueComputed.value) { return props.clearValue }\n      if (typeof valueComputed.value === 'string') { return valueComputed.value }\n      if (Array.isArray(valueComputed.value)) {\n        return valueComputed.value.map((value) => getText(value)).join(props.separator) || props.clearValue\n      }\n\n      return getText(valueComputed.value)\n    })\n\n    // Icons\n\n    const showClearIcon = computed((): boolean => {\n      if (!props.clearable) { return false }\n      if (props.disabled) { return false }\n      if (props.multiple) { return !!valueComputed.value.length }\n\n      return valueComputed.value !== props.clearValue\n    })\n\n    const toggleIcon = computed((): string => {\n      if (!props.dropdownIcon) { return '' }\n\n      if (typeof props.dropdownIcon === 'string') {\n        return props.dropdownIcon\n      }\n\n      return showDropdownContent.value ? props.dropdownIcon.close : props.dropdownIcon.open\n    })\n\n    // Options\n\n    const filteredOptions = computed((): any[] => {\n      if (!props.options) { return [] }\n\n      if (props.hideSelected) {\n        return (props.options).filter((option) => !checkIsOptionSelected(option))\n      }\n\n      return props.options\n    })\n\n    const checkIsOptionSelected = (option: any): boolean => {\n      if (!valueComputed.value) { return false }\n\n      if (Array.isArray(valueComputed.value)) {\n        return !!valueComputed.value.find((valueItem: any) => compareOptions(valueItem, option))\n      }\n\n      return compareOptions(valueComputed.value, option)\n    }\n\n    const compareOptions = (one: any, two: any) => {\n      // identity check works nice for strings and exact matches.\n      if (one === two) {\n        return true\n      }\n      if (typeof one === 'string' && typeof two === 'string') {\n        return one === two\n      }\n      if (one === null || two === null) {\n        return false\n      }\n      if (typeof one === 'object' && typeof two === 'object') {\n        return getTrackBy(one) === getTrackBy(two)\n      }\n\n      return false\n    }\n\n    const selectedOption = computed(() => {\n      if (props.multiple) { return null }\n      if (!valueComputed.value) { return null }\n      if (!props.options) { return null }\n\n      return props.options.find((option: any) => compareOptions(option, valueComputed.value))\n    })\n\n    const { exceedsMaxSelections, addOption } = useMaxSelections(valueComputed, ref(props.maxSelections), context.emit)\n\n    const selectOption = (option: any): void => {\n      if (hoveredOption.value === null) {\n        hideAndFocus()\n        return\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = ''\n      }\n\n      if (props.multiple) {\n        const isSelected = checkIsOptionSelected(option)\n\n        if (isSelected) {\n          // Unselect\n          valueComputed.value = valueComputed.value.filter((optionSelected: any) => !compareOptions(option, optionSelected))\n        } else {\n          if (exceedsMaxSelections()) { return }\n          addOption(option)\n        }\n      } else {\n        valueComputed.value = typeof option === 'string' ? option : { ...option }\n        hideAndFocus()\n      }\n    }\n\n    const selectOrAddOption = () => {\n      if (hoveredOption.value !== null) {\n        selectHoveredOption()\n        return\n      }\n\n      if (allowCreateCheck()) {\n        addNewOption()\n      }\n    }\n\n    const allowCreateCheck = (): boolean => {\n      return !!(props.allowCreate && searchInput.value !== '')\n    }\n\n    const addNewOption = (): void => {\n      if (props.multiple) {\n        if (exceedsMaxSelections()) { return }\n\n        const hasAddedOption: boolean = valueComputed.value.some((value: any) => value === searchInput.value)\n\n        // Do not change valueComputed if option already exist and allow create is `unique`\n        if (!(props.allowCreate === 'unique' && hasAddedOption)) {\n          valueComputed.value = [...valueComputed.value, searchInput.value]\n        }\n      } else {\n        valueComputed.value = searchInput.value\n      }\n\n      searchInput.value = ''\n    }\n\n    // Hovered options\n\n    const hoveredOption = ref(null as any)\n\n    const selectHoveredOption = () => {\n      if (!showDropdownContent.value) {\n        // We can not select options if they are hidden\n        showDropdown()\n        return\n      }\n\n      selectOption(hoveredOption.value)\n    }\n\n    const hoverPreviousOption = () => {\n      optionList.value?.hoverPreviousOption()\n    }\n\n    const hoverNextOption = () => {\n      optionList.value?.hoverNextOption()\n    }\n\n    // Dropdown content\n\n    const showDropdownContent = ref(false)\n\n    const showDropdownContentComputed = computed({\n      get: () => {\n        return showDropdownContent.value\n      },\n      set: (show: boolean) => {\n        show\n          ? showDropdown()\n          : hideDropdown()\n      },\n    })\n\n    const closeOnContentClick = computed(() => {\n      return !(props.multiple || props.searchable || props.allowCreate)\n    })\n\n    const showDropdown = () => {\n      showDropdownContent.value = true\n      scrollToSelected()\n      focusSearchOrOptions()\n    }\n\n    const hideDropdown = () => {\n      showDropdownContent.value = false\n      validate()\n    }\n\n    const toggleDropdown = () => {\n      if (showDropdownContent.value) {\n        hideAndFocus()\n      } else {\n        showDropdown()\n      }\n    }\n\n    // Focus and keyboard navigation\n\n    const isFocusedComputed = computed(() => {\n      // If we show dropdown content that means select is focused\n      return isFocused.value || showDropdownContent.value\n    })\n\n    const onSelectClick = () => {\n      if (props.disabled) {\n        return\n      }\n\n      toggleDropdown()\n    }\n\n    const focusSelect = () => {\n      select.value?.focus()\n    }\n\n    const hideAndFocus = (): void => {\n      hideDropdown()\n      focusSelect()\n    }\n\n    const focusSearchBar = () => {\n      searchBar.value?.focus()\n    }\n\n    const focusOptionList = () => {\n      optionList.value?.focus()\n    }\n\n    const focusSearchOrOptions = () => {\n      nextTick(() => {\n        if (showSearchInput.value) {\n          focusSearchBar()\n        } else { focusOptionList() }\n      })\n    }\n\n    /** @public */\n    const focus = (): void => {\n      if (props.disabled) {\n        return\n      }\n      isFocused.value = true\n    }\n\n    /** @public */\n    const blur = (): void => {\n      isFocused.value = false\n      validate()\n    }\n\n    /** @public */\n    const reset = (): void => {\n      if (props.multiple) {\n        valueComputed.value = Array.isArray(props.clearValue) ? props.clearValue : []\n      } else {\n        valueComputed.value = props.clearValue\n      }\n\n      searchInput.value = ''\n      context.emit('clear')\n    }\n\n    const tabIndexComputed = computed(() => {\n      return props.disabled ? -1 : props.tabindex\n    })\n\n    const scrollToSelected = (): void => {\n      const selected = valueComputed.value\n      const nothingSelected = !selected.length && typeof selected !== 'object'\n\n      if (nothingSelected) {\n        return\n      }\n\n      const scrollTo = Array.isArray(selected) ? selected[selected.length - 1] : selected\n      hoveredOption.value = scrollTo\n      nextTick(() => optionList.value?.scrollToOption(scrollTo))\n    }\n\n    // Hinted search\n\n    let hintedSearchQuery = ''\n    let hintedSearchQueryTimeoutIndex!: any\n    const navigationKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', ' ']\n\n    // Hinted search - hover option if you typing it's value on select without search-bar\n    const onHintedSearch = (event: KeyboardEvent) => {\n      if (navigationKeys.some(key => key === event.key)) {\n        return\n      }\n\n      const isLetter: boolean = event.key.length === 1\n      const isDeleteKey: boolean = event.key === 'Backspace' || event.key === 'Delete'\n\n      clearTimeout(hintedSearchQueryTimeoutIndex)\n\n      if (isDeleteKey) {\n        // Remove last letter from query\n        hintedSearchQuery = hintedSearchQuery ? hintedSearchQuery.slice(0, -1) : ''\n      } else if (isLetter) {\n        // Add every new letter to the query\n        hintedSearchQuery += event.key\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = hintedSearchQuery\n        return\n      }\n\n      // Search for an option that matches the query\n      if (hintedSearchQuery) {\n        const appropriateOption = props.options.find(option => getText(option).toLowerCase().startsWith(hintedSearchQuery.toLowerCase()))\n        if (appropriateOption) {\n          hoveredOption.value = appropriateOption\n        }\n      }\n\n      hintedSearchQueryTimeoutIndex = setTimeout(() => { hintedSearchQuery = '' }, 1000)\n    }\n\n    return {\n      select,\n      optionList,\n      focusOptionList,\n      focus,\n      blur,\n      reset,\n      onSelectClick,\n      hideAndFocus,\n      searchBar,\n      focusSearchBar,\n      searchInput,\n      showSearchInput,\n      hoveredOption,\n      tabIndexComputed,\n      valueComputed,\n      valueComputedString,\n      showClearIcon,\n      toggleIcon,\n      showDropdownContent,\n      computedErrorMessages,\n      computedError,\n      filteredOptions,\n      checkIsOptionSelected,\n      closeOnContentClick,\n      selectOption,\n      selectOrAddOption,\n      selectHoveredOption,\n      hoverPreviousOption,\n      hoverNextOption,\n      showDropdownContentComputed,\n      showDropdown,\n      hideDropdown,\n      toggleDropdown,\n      isFocusedComputed,\n      colorComputed,\n      onHintedSearch,\n      getText,\n      getTrackBy,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources/resources\";\n@import 'variables';\n\n.va-select {\n  cursor: var(--va-select-cursor);\n\n  .va-input {\n    cursor: var(--va-select-cursor);\n  }\n\n  .va-input__append {\n    display: flex;\n    justify-content: center;\n    align-content: center;\n  }\n\n  &__dropdown {\n    .va-dropdown__anchor {\n      display: block;\n    }\n\n    .va-dropdown__content {\n      overflow: hidden;\n      border-bottom-right-radius: var(--va-select-dropdown-border-radius);\n      border-bottom-left-radius: var(--va-select-dropdown-border-radius);\n      border-top-right-radius: 0;\n      border-top-left-radius: 0;\n      box-shadow: var(--va-select-box-shadow);\n      padding: 0;\n    }\n\n    .va-select__dropdown__content {\n      background: var(--va-select-dropdown-background);\n      overflow-y: auto;\n\n      @include va-scroll(var(--va-select-scroll-color));\n    }\n  }\n}\n</style>\n"],"names":["defineComponent","name","components","VaSelectOptionList","VaIcon","VaDropdown","VaInput","VaInputWrapper","emits","props","useSelectableListProps","useFormComponentProps","useLoadingProps","useMaxSelectionsProps","modelValue","type","String","Number","Object","Array","default","position","validator","includes","allowCreate","Boolean","mode","color","multiple","searchable","disabled","readonly","separator","width","maxHeight","clearValue","noOptionsText","fixed","clearable","clearableIcon","hideSelected","tabindex","dropdownIcon","open","close","value","isOpenIconString","isCloseIconString","outline","bordered","label","placeholder","setup","context","select","ref","optionList","searchBar","getOptionByValue","getValue","getText","getTrackBy","useSelectableList","validate","isFocused","computedErrorMessages","computedError","useFormComponent","colorComputed","useColor","searchInput","showSearchInput","computed","watch","emit","hoveredOption","valueComputed","get","isArray","warn","length","set","valueComputedString","map","join","showClearIcon","toggleIcon","showDropdownContent","filteredOptions","options","filter","option","checkIsOptionSelected","find","valueItem","compareOptions","one","two","exceedsMaxSelections","addOption","useMaxSelections","maxSelections","selectOption","optionSelected","hideAndFocus","allowCreateCheck","addNewOption","hasAddedOption","some","selectHoveredOption","showDropdown","showDropdownContentComputed","show","hideDropdown","closeOnContentClick","scrollToSelected","focusSearchOrOptions","toggleDropdown","isFocusedComputed","focus","focusSearchBar","focusOptionList","nextTick","tabIndexComputed","selected","scrollTo","scrollToOption","hintedSearchQueryTimeoutIndex","hintedSearchQuery","navigationKeys","blur","reset","onSelectClick","selectOrAddOption","hoverPreviousOption","hoverNextOption","onHintedSearch","event","key","isLetter","isDeleteKey","clearTimeout","slice","appropriateOption","toLowerCase","startsWith","setTimeout"],"mappings":"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"}