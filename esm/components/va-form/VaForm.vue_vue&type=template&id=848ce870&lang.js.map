{"version":3,"file":"VaForm.vue_vue&type=template&id=848ce870&lang.js","sources":["../../../../src/components/va-form/VaForm.vue?vue&type=template&id=848ce870&lang.js"],"sourcesContent":["<template>\n  <component\n    class=\"va-form\"\n    :is=\"tag\"\n  >\n    <slot />\n  </component>\n</template>\n\n<script lang=\"ts\">\nimport { inject, provide } from 'vue'\nimport { Options, mixins, prop, Vue, setup } from 'vue-class-component'\nimport { FormComponentMixin } from '../../mixins/FormComponent/FormComponentMixin'\nimport { FormProvider, FormServiceKey } from './consts'\n\nclass FormProps {\n  autofocus = prop<boolean>({ type: Boolean, default: false })\n  tag = prop<string>({ type: String, default: 'div' })\n}\n\nconst FormPropsMixin = Vue.with(FormProps)\n\ninterface UniversalFormBlock {\n  reset: () => void;\n  some: () => void;\n}\n\n@Options({\n  name: 'VaForm',\n  emits: ['validation'],\n})\nexport default class VaForm extends mixins(\n  FormPropsMixin,\n) {\n  nestedFormElements: (FormComponentMixin | VaForm)[] = [];\n\n  parentFormProvider: FormProvider | Record<string, unknown> = setup(() => {\n    return {\n      ...inject(FormServiceKey, undefined),\n    }\n  })\n\n  formProvider = setup(() => {\n    const onChildMounted = (child: FormComponentMixin | VaForm) => this.childMountedHandler(child)\n    const onChildUnmounted = (removableChild: FormComponentMixin | VaForm) => this.childUnmountedHandler(removableChild)\n\n    const formProvider = {\n      onChildMounted,\n      onChildUnmounted,\n    }\n\n    provide(FormServiceKey, formProvider)\n\n    return formProvider\n  })\n\n  childMountedHandler (child: FormComponentMixin | VaForm) {\n    this.nestedFormElements.push(child)\n  }\n\n  childUnmountedHandler (removableChild: FormComponentMixin | VaForm) {\n    this.nestedFormElements = this.nestedFormElements.filter(child => child !== removableChild)\n  }\n\n  mounted () {\n    if (Object.keys(this.parentFormProvider).length) {\n      // @ts-ignore\n      this.parentFormProvider.onChildMounted(this)\n    }\n    if (this.autofocus) {\n      this.$nextTick(() => {\n        this.focus()\n      })\n    }\n  }\n\n  unmounted () {\n    if (Object.keys(this.parentFormProvider).length) {\n      // @ts-ignore\n      this.parentFormProvider.onChildUnmounted(this)\n    }\n  }\n\n  // public methods\n  reset () {\n    this.nestedFormElements\n      .filter(({ reset }) => reset)\n      .forEach((item) => {\n        item.reset()\n      })\n  }\n\n  resetValidation () {\n    this.nestedFormElements\n      .filter(({ resetValidation }) => resetValidation)\n      .forEach((item: any) => {\n        item.resetValidation()\n      })\n  }\n\n  focus () {\n    const focusableElement = this.nestedFormElements.find(({ focus }) => focus)\n    if (focusableElement) {\n      focusableElement.focus()\n    }\n  }\n\n  focusInvalid () {\n    const invalidComponent = this.nestedFormElements\n      // @ts-ignore\n      .filter(({ hasError }) => hasError)\n      // @ts-ignore\n      .find((item) => item.hasError())\n\n    if (invalidComponent) {\n      invalidComponent.focus()\n    } else {\n      // @ts-ignore\n      const nestedFormComponents = this.nestedFormElements.filter(({ nestedFormElements }) => nestedFormElements)\n      // @ts-ignore\n      nestedFormComponents.forEach(formComponent => formComponent.focusInvalid())\n    }\n  }\n\n  validate () { // NOTE: temporarily synchronous validation\n    let formValid = true\n    this.nestedFormElements\n      .filter(({ validate }) => validate)\n      .forEach((child) => {\n        const isValidChild = child.validate()\n        if (!isValidChild) {\n          formValid = false\n        }\n      })\n    this.$emit('validation', formValid)\n    return formValid\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.va-form {\n}\n</style>\n"],"names":["_createBlock","_ctx","class","_renderSlot"],"mappings":"sIACEA,IAEOC,QADLC,MAAM,uBAGN,KAAAC"}