{"version":3,"file":"VaDropdown.vue_vue&type=template&id=6d4e48a8&lang.js","sources":["../../../../src/components/va-dropdown/VaDropdown.vue?vue&type=template&id=6d4e48a8&lang.js"],"sourcesContent":["<template>\n  <div\n    class=\"va-dropdown\"\n    :class=\"classComputed\"\n  >\n    <div\n      class=\"va-dropdown__anchor\"\n      @mouseover=\"onMouseOver()\"\n      @mouseout=\"onMouseOut()\"\n      @click=\"onAnchorClick()\"\n      @keyup.enter.stop.prevent=\"onAnchorClick()\"\n      ref=\"anchor\"\n    >\n      <slot name=\"anchor\" />\n    </div>\n    <template v-if=\"showContent\">\n      <div\n        class=\"va-dropdown__content-wrapper\"\n        @mouseover=\"$props.isContentHoverable && onMouseOver()\"\n        @mouseout=\"onMouseOut()\"\n        @click.stop=\"onDropdownContentClick()\"\n        ref=\"contentWrapper\"\n      >\n        <div :style=\"$props.keepAnchorWidth ? anchorWidthStyles : ''\">\n          <slot />\n        </div>\n      </div>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { watch, nextTick } from 'vue'\nimport { Vue, Options, prop, mixins } from 'vue-class-component'\nimport { DebounceLoader } from 'asva-executors'\nimport { createPopper, Instance } from '@popperjs/core'\nimport { StatefulMixin } from '../../mixins/StatefulMixin/StatefulMixin'\n\ntype PopperInstance = Instance | null\ntype ClickType = 'anchor-click' | 'dropdown-content-click' | 'click-outside'\n\nclass DropdownProps {\n  debugId = prop<string>({ type: String, default: '' })\n  position = prop<string>({ type: String, default: '' })\n  hoverOverTimeout = prop<number>({ type: Number, default: 30 })\n  hoverOutTimeout = prop<number>({ type: Number, default: 200 })\n  boundaryBody = prop<boolean>({ type: Boolean })\n  modelValue = prop<boolean>({ type: Boolean, default: false })\n  disabled = prop<boolean>({ type: Boolean, default: false })\n  // Makes no sense\n  // fixed = prop<boolean>({ type: Boolean })\n  // Means dropdown width should be the same as anchor's width.\n  keepAnchorWidth = prop<boolean>({ type: Boolean })\n  // If set to false - dropdown won't dodge outside container.\n  preventOverflow = prop<boolean>({ type: Boolean, default: false })\n  closeOnContentClick = prop<boolean>({ type: Boolean, default: true })\n  closeOnClickOutside = prop<boolean>({ type: Boolean, default: true })\n  closeOnAnchorClick = prop<boolean>({ type: Boolean, default: true })\n  isContentHoverable = prop<boolean>({ type: Boolean, default: true })\n  offset = prop<number | number[]>({ type: [Array, Number], default: () => [] })\n  trigger = prop<string>({\n    type: String,\n    default: 'click',\n    validator: (trigger: string) => ['click', 'hover', 'none'].includes(trigger),\n  })\n  stateful = prop<boolean>({ type: Boolean, default: true })\n}\n\nconst DropdownPropsMixin = Vue.with(DropdownProps)\n\n@Options({\n  name: 'VaDropdown',\n  emits: ['update:modelValue', 'anchor-click', 'click-outside', 'dropdown-content-click'],\n})\nexport default class VaDropdown extends mixins(\n  StatefulMixin,\n  DropdownPropsMixin,\n) {\n  popperInstance: PopperInstance = null\n  anchorWidth = 0\n  hoverOverDebounceLoader!: DebounceLoader\n  hoverOutDebounceLoader!: DebounceLoader\n\n  get anchorWidthStyles (): { width: string; maxWidth: string } {\n    return {\n      width: this.anchorWidth + 'px',\n      maxWidth: this.anchorWidth + 'px',\n    }\n  }\n\n  get classComputed () {\n    return {\n      'va-dropdown--disabled': this.$props.disabled,\n    }\n  }\n\n  get showContent (): boolean {\n    return this.valueComputed\n  }\n\n  handlePopperInstance (): void {\n    if (this.popperInstance) {\n      this.removePopper()\n    }\n\n    if (!this.showContent) {\n      return\n    }\n\n    this.updateAnchorWidth()\n\n    nextTick(() => {\n      this.initPopper()\n    })\n  }\n\n  handleClick (emitName: ClickType, toClose: boolean): void {\n    this.$emit(emitName)\n    if (toClose) {\n      this.hide()\n    }\n  }\n\n  onDropdownContentClick (): void {\n    this.handleClick('dropdown-content-click', this.closeOnContentClick)\n  }\n\n  onClickOutside (): void {\n    this.handleClick('click-outside', this.closeOnClickOutside)\n  }\n\n  onAnchorClick (): void {\n    if (this.$props.disabled) {\n      return\n    }\n    if (this.$props.trigger === 'click') {\n      if (this.valueComputed) {\n        this.handleClick('anchor-click', this.closeOnAnchorClick)\n        return\n      }\n      this.valueComputed = true\n    }\n    this.$emit('anchor-click')\n  }\n\n  // Kinda complex logic here.\n  // We want to achieve 2 things:\n  // * Fast mouse-over shouldn't trigger dropdown.\n  // * Dropdown shouldn't close when you move mouse from anchor to content (even with offset).\n  onMouseOver (): void {\n    if (this.$props.disabled || this.$props.trigger !== 'hover') {\n      return\n    }\n    if (!this.valueComputed) {\n      this.hoverOverDebounceLoader.run()\n    }\n    this.hoverOutDebounceLoader.reset()\n  }\n\n  onMouseOut (): void {\n    if (this.$props.trigger !== 'hover') {\n      return\n    }\n    if (this.isContentHoverable) {\n      this.hoverOutDebounceLoader.run()\n    } else {\n      this.valueComputed = false\n    }\n    this.hoverOverDebounceLoader.reset()\n  }\n\n  registerClickOutsideListener (): void {\n    document.addEventListener('click', event => this.handleDocumentClick(event), false)\n  }\n\n  unregisterClickOutsideListener (): void {\n    document.removeEventListener('click', event => this.handleDocumentClick(event), false)\n  }\n\n  handleDocumentClick (event: any): void {\n    let el = event.target\n    const clickedElements = [] // Array because dropdowns can be nested.\n    // TODO Make DOM walk-over global, so that each dropdown doesn't have to do it.\n    while (el) {\n      clickedElements.push(el)\n      el = el.parentNode\n    }\n    const isCurrentDropdownClicked = clickedElements.includes(this.$refs.anchor) || clickedElements.includes(this.$refs.contentWrapper)\n    if (isCurrentDropdownClicked) {\n      return\n    }\n    if (this.showContent) {\n      this.onClickOutside()\n    }\n  }\n\n  updateAnchorWidth (): void {\n    if (this.keepAnchorWidth) {\n      this.anchorWidth = (this as any).$refs.anchor.offsetWidth\n    }\n    if (this.popperInstance) {\n      this.popperInstance.forceUpdate()\n    }\n  }\n\n  /** @public */\n  hide (): void {\n    this.valueComputed = false\n  }\n\n  initPopper (): void {\n    const options: any = {\n      placement: this.position || 'bottom',\n      modifiers: [],\n      // strategy: this.fixed ? 'fixed' : undefined,\n      onFirstUpdate: () => {\n        this.valueComputed = true\n      },\n    }\n\n    const preventOverflow: any = {\n      name: 'preventOverflow',\n      options: {},\n    }\n    if (this.preventOverflow) {\n      options.modifiers.push(preventOverflow)\n    }\n    if (this.boundaryBody) {\n      preventOverflow.options.boundary = document.body\n    }\n\n    if (this.offset) {\n      options.modifiers.push({\n        name: 'offset',\n        options: {\n          offset: Array.isArray(this.offset) ? this.offset : [this.offset],\n        },\n      })\n      // options.modifiers.keepTogether = { enabled: false }\n      // options.modifiers.arrow = { enabled: false }\n    }\n\n    this.popperInstance = createPopper(\n      this.$refs.anchor as Element,\n      this.$refs.contentWrapper as HTMLElement,\n      options,\n    )\n  }\n\n  removePopper (): void {\n    this.valueComputed = false\n\n    if (!this.popperInstance) {\n      return\n    }\n    this.popperInstance.destroy()\n    this.popperInstance = null\n  }\n\n  created (): void {\n    watch(() => this.showContent, () => {\n      this.handlePopperInstance()\n    })\n    this.hoverOverDebounceLoader = new DebounceLoader(\n      async () => {\n        this.valueComputed = true\n      },\n      this.hoverOverTimeout,\n    )\n    this.hoverOutDebounceLoader = new DebounceLoader(\n      async () => {\n        this.valueComputed = false\n      },\n      this.hoverOutTimeout,\n    )\n    // nuxt fix\n    if ((this as any).$isServer) {\n      return\n    }\n    this.registerClickOutsideListener()\n  }\n\n  mounted (): void {\n    this.handlePopperInstance()\n  }\n\n  beforeUnmount (): void {\n    this.unregisterClickOutsideListener()\n    this.removePopper()\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import '../../styles/resources/resources';\n@import \"variables\";\n\n.va-dropdown {\n  /* Solved the alignment problem (if we try to align inline and block elements) */\n  line-height: var(--va-dropdown-line-height);\n\n  &--disabled {\n    @include va-disabled;\n  }\n\n  &__content-wrapper {\n    /* overflow: hidden; */\n    z-index: var(--va-dropdown-content-wrapper-z-index);\n  }\n}\n</style>\n"],"names":["_createBlock","class","_ctx","_createVNode","onMouseover","onMouseout","onClick","onKeyup","ref","_renderSlot","isContentHoverable","style","keepAnchorWidth"],"mappings":"sKACEA,SACEC,OAAM,cACEC,mBAERC,SACEF,MAAM,sBACLG,2BAAWF,iBACXG,0BAAUH,gBACVI,uBAAOJ,mBACPK,4BAA0BL,mDAC3BM,IAAI,WAEJC,2BAEcP,EAAW,iBACzBF,eACEC,MAAM,+BACLG,2BAAWF,SAAOQ,oBAAsBR,iBACxCG,0BAAUH,gBACVI,0BAAYJ,uCACbM,IAAI,mBAEJL,SAAMQ,MAAOT,SAAOU,gBAAkBV,yBACpCO"}