{"version":3,"file":"index.js","sources":["../../../../src/components/va-toast/index.ts"],"sourcesContent":["import VaToast from './VaToast'\nimport { NotificationOptions } from './types'\nimport { VNode, App, createVNode, render, cloneVNode } from 'vue'\n\nconst Z_INDEX = 100\nconst GAP = 5\nlet seed = 1\n\nlet toastInstances: VNode[] = []\n\ntype OptionKeys = keyof NotificationOptions;\n\nconst merge = (target: NotificationOptions | any, ...args: NotificationOptions[]): NotificationOptions => {\n  args.forEach((source) => {\n    if (typeof source !== 'object') {\n      return\n    }\n    for (const prop in source) {\n      if (Object.prototype.hasOwnProperty.call(source, prop)) {\n        const value = source[prop as OptionKeys]\n        if (value !== undefined) {\n          target[prop] = value\n        }\n      }\n    }\n  })\n  return target\n}\n\nconst getTranslateValue = (item: VNode, position: string) => {\n  if (item.el) {\n    const direction = position.includes('bottom') ? -1 : 1\n    return (item.el.offsetHeight + GAP) * direction\n  }\n  return 0\n}\n\nconst getNewTranslateValue = (transformY: string, redundantHeight: number, position: string) => {\n  const direction = position.includes('bottom') ? -1 : 1\n  return parseInt(transformY, 10) - (redundantHeight + GAP) * direction\n}\n\nconst getNodeProps = (vNode: VNode) => {\n  // Here we assume that vNode is a `withConfigTransport` wrapped component\n  // so we can derive computedProps from it\n\n  // @ts-ignore\n  return vNode.component?.proxy?.computedProps as Record<OptionKeys, any>\n}\n\nconst closeNotification = (targetInstance: VNode | null, destroyElementFn: () => void) => {\n  if (!targetInstance) {\n    return\n  }\n\n  if (!toastInstances.length) {\n    seed = 1\n    return\n  }\n  const targetInstanceIndex = toastInstances.findIndex((instance) => instance === targetInstance)\n\n  if (targetInstanceIndex < 0) {\n    return\n  }\n\n  const nodeProps = getNodeProps(targetInstance)\n\n  const {\n    offsetX: targetOffsetX,\n    offsetY: targetOffsetY,\n    position: targetPosition,\n  } = nodeProps\n  const redundantHeight: number | null = targetInstance.el?.offsetHeight\n\n  destroyElementFn()\n\n  toastInstances = toastInstances.reduce((acc: any[], instance, index) => {\n    if (instance === targetInstance) {\n      return acc\n    }\n    if (instance.component) {\n      const { offsetX, offsetY, position } = getNodeProps(instance)\n      const isNextInstance = index > targetInstanceIndex && targetOffsetX === offsetX && targetOffsetY === offsetY && targetPosition === position\n      if (isNextInstance && instance.el && redundantHeight) {\n        const [_, transformY] = instance.el.style.transform.match(/[\\d-]+(?=px)/g)\n        const transformYNew = getNewTranslateValue(transformY, redundantHeight, position)\n        instance.el.style.transform = `translate(0, ${transformYNew}px)`\n      }\n    }\n    return [...acc, instance]\n  }, [])\n\n  if (!toastInstances.length) {\n    seed = 1\n  }\n}\n\nconst destroy = (el: HTMLElement | null | undefined, node: VNode | null) => {\n  if (el) {\n    render(null, el)\n    el.remove()\n  }\n  el = null\n  node = null\n}\n\nconst mount = (component: any, {\n  props,\n  children,\n  element,\n  app,\n}: { props?: { [key: string]: any }; children?: any; element?: HTMLElement; app?: App } = {}): { vNode: VNode; el?: HTMLElement } => {\n  let el: HTMLElement | null | undefined = element\n\n  // eslint-disable-next-line prefer-const\n  let vNode: VNode | null\n\n  const onClose = () => {\n    closeNotification(vNode, () => destroy(el, vNode))\n\n    if (props?.onClose) {\n      props.onClose()\n    }\n  }\n\n  vNode = createVNode(component, { ...props, onClose }, children)\n\n  if (app?._context) {\n    vNode.appContext = app._context\n  }\n  if (el) {\n    render(vNode, el)\n  } else if (typeof document !== 'undefined') {\n    render(vNode, el = document.createElement('div'))\n  }\n\n  return { vNode, el }\n}\n\nconst closeAllNotifications = () => {\n  if (!toastInstances.length) {\n    seed = 1\n    return\n  }\n  toastInstances.forEach(instance => getNodeProps(instance).onClose())\n}\n\nconst closeById = (id: string) => {\n  const targetInstance = toastInstances.find(instance => instance.el?.id === id)\n\n  if (targetInstance) {\n    const nodeProps = getNodeProps(targetInstance)\n    nodeProps.onClose()\n  }\n}\n\nconst createToastInstance = (customProps: NotificationOptions, app: App): VNode | null => {\n  const { vNode, el } = mount(VaToast, { app, props: customProps })\n\n  const nodeProps = getNodeProps(vNode)\n\n  if (el && vNode.el && nodeProps) {\n    document.body.appendChild(el)\n    const { offsetX, offsetY, position } = nodeProps\n\n    vNode.el.style.display = 'flex'\n    vNode.el.id = 'notification_' + seed\n    vNode.el.style.zIndex = Z_INDEX + ''\n\n    let transformY = 0\n    toastInstances.filter(item => {\n      const {\n        offsetX: itemOffsetX,\n        offsetY: itemOffsetY,\n        position: itemPosition,\n      } = getNodeProps(item)\n\n      return itemOffsetX === offsetX && itemOffsetY === offsetY && position === itemPosition\n    }).forEach((item) => {\n      transformY += getTranslateValue(item, position)\n    })\n    vNode.el.style.transform = `translate(0, ${transformY}px)`\n\n    seed += 1\n    return vNode\n  }\n  return null\n}\n\nconst getToastOptions = (options: string | NotificationOptions): any => {\n  if (typeof options === 'string') {\n    options = {\n      message: options,\n    }\n  }\n  return merge({}, options)\n}\n\nconst initNotification = (options: NotificationOptions | string, app: App) => {\n  const toastInstance = createToastInstance(getToastOptions(options), app)\n  if (toastInstance) {\n    toastInstances.push(toastInstance)\n  }\n  return toastInstance\n}\n\nclass Notification {\n  app: App;\n\n  constructor (app: App) {\n    this.app = app\n  }\n\n  init (options: NotificationOptions) {\n    return initNotification(options, this.app)?.el?.id as null | string\n  }\n\n  close (id: string) {\n    closeById(id)\n  }\n\n  closeAll () {\n    closeAllNotifications()\n  }\n}\n\nexport default Notification\n"],"names":["seed","toastInstances","getNodeProps","vNode","component","proxy","computedProps","closeNotification","targetInstance","destroyElementFn","length","targetInstanceIndex","findIndex","instance","nodeProps","offsetX","targetOffsetX","offsetY","targetOffsetY","position","targetPosition","redundantHeight","el","offsetHeight","reduce","acc","index","_","transformY","style","transform","match","transformYNew","direction","includes","parseInt","getNewTranslateValue","mount","props","children","element","app","createVNode","onClose","node","render","remove","destroy","_context","appContext","document","createElement","getToastOptions","options","message","target","args","forEach","source","prop","Object","prototype","hasOwnProperty","call","value","undefined","merge","initNotification","toastInstance","customProps","VaToast","body","appendChild","display","id","zIndex","Z_INDEX","filter","item","itemOffsetX","itemOffsetY","itemPosition","getTranslateValue","createToastInstance","push","constructor","this","init","close","find","closeById","closeAll"],"mappings":"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"}