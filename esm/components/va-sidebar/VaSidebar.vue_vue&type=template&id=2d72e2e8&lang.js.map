{"version":3,"file":"VaSidebar.vue_vue&type=template&id=2d72e2e8&lang.js","sources":["../../../../src/components/va-sidebar/VaSidebar.vue?vue&type=template&id=2d72e2e8&lang.js"],"sourcesContent":["<template>\n  <aside\n    :class=\"computedClass\"\n    :style=\"computedStyle\"\n    @mouseenter=\"updateHoverState(true)\"\n    @mouseleave=\"updateHoverState(false)\"\n  >\n    <div class=\"va-sidebar__menu\">\n      <slot />\n    </div>\n  </aside>\n</template>\n\n<script lang=\"ts\">\nimport { Options, prop, Vue, mixins } from 'vue-class-component'\n\nimport { getGradientBackground } from '../../services/color-config/color-functions'\nimport { useColors } from '../../services/color-config/color-config'\n\nclass SidebarProps {\n  color = prop<string>({ type: String, default: 'background' })\n  textColor = prop<string>({ type: String, default: undefined })\n  gradient = prop<boolean>({ type: Boolean, default: false })\n  minimized = prop<boolean>({ type: Boolean, default: false })\n  hoverable = prop<boolean>({ type: Boolean, default: false })\n  position = prop<string>({ type: String, default: 'left' })\n  width = prop<string>({ type: String, default: '16rem' })\n  minimizedWidth = prop<string>({ type: String, default: '2.5rem' })\n  modelValue = prop<boolean>({ type: Boolean, default: true })\n}\n\nconst SidebarPropsMixin = Vue.with(SidebarProps)\n\n@Options({ name: 'VaSidebar' })\nexport default class VaSidebar extends SidebarPropsMixin {\n  isHovered = false\n\n  get isMinimized () {\n    return this.$props.minimized || (this.$props.hoverable && !this.isHovered)\n  }\n\n  get computedStyle () {\n    const { getColor, getTextColor } = useColors()\n\n    const backgroundColor = getColor(this.color)\n    const background = this.gradient ? getGradientBackground(backgroundColor) : backgroundColor\n\n    const color = this.$props.textColor ? getColor(this.textColor) : getTextColor(backgroundColor)\n\n    return {\n      color,\n      background,\n      width: this.computedWidth,\n    }\n  }\n\n  get computedWidth () {\n    if (!this.$props.modelValue) {\n      return 0\n    }\n    return this.isMinimized ? this.$props.minimizedWidth : this.$props.width\n  }\n\n  get computedClass () {\n    return {\n      'va-sidebar': true,\n      'va-sidebar--minimized': this.isMinimized,\n      'va-sidebar--hidden': !this.modelValue,\n      'va-sidebar--right': this.$props.position === 'right',\n    }\n  }\n\n  updateHoverState (isHovered: boolean) {\n    this.isHovered = this.$props.hoverable ? isHovered : false\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources/resources\";\n@import 'variables';\n\n.va-sidebar {\n  min-height: var(--va-sidebar-min-height);\n  height: var(--va-sidebar-height);\n  position: var(--va-sidebar-position);\n  top: var(--va-sidebar-top);\n  left: var(--va-sidebar-left);\n  transition: var(--va-sidebar-transition);\n  z-index: var(--va-sidebar-z-index);\n\n  &__menu {\n    max-height: var(--va-sidebar-menu-max-height);\n    margin-bottom: var(--va-sidebar-menu-margin-bottom);\n    list-style: var(--va-sidebar-menu-list-style);\n    padding-left: var(--va-sidebar-menu-padding-left);\n    overflow-y: var(--va-sidebar-menu-overflow-y);\n    overflow-x: var(--va-sidebar-menu-overflow-x);\n  }\n\n  &--minimized {\n    left: 0;\n\n    .va-sidebar-link-group {\n      .va-sidebar-link__content {\n        padding-right: 0;\n      }\n    }\n\n    & + .content-wrap {\n      margin-left: $sidebar-width--hidden !important;\n    }\n  }\n\n  &--right {\n    left: auto;\n    right: 0;\n  }\n}\n</style>\n"],"names":["class","_createBlock","_ctx","style","onMouseenter","onMouseleave","_createVNode","_hoisted_1","_renderSlot"],"mappings":"2FAOSA,MAAM,+CANbC,WACGD,MAAOE,gBACPC,MAAOD,gBACPE,4BAAYF,wBACZG,4BAAYH,0BAEbI,QAAAC,GACEC"}