{"version":3,"file":"child-props.js","sources":["../../../../../src/components/va-date-picker/utils/child-props.ts"],"sourcesContent":["import { ComponentOptionsBase, PropType, computed, ComputedRef, Prop } from 'vue'\n\n/**\n * Accepts parent component props and return value only for child component props.\n *\n * Used to proxy child component props from parent.\n */\nexport const filterComponentProps = (propsValues: Record<string, any>, childProps: Record<string, any>): ComputedRef<Record<keyof typeof childProps, any>> => {\n  return computed(() => Object\n    .keys(childProps)\n    .reduce<Record<string, unknown>>((acc, propName) => {\n      acc[propName] = propsValues[propName]\n      return acc\n    }, {}),\n  )\n}\n\n// ExtractOptionProp taken from Vue3 source code\ndeclare type ExtractOptionProp<T> = T extends ComponentOptionsBase<infer P, any, any, any, any, any, any, any> ? unknown extends P ? {} : P : {};\n// Remove useless readonly and nullable key here:\n// -readonly removes readonly\n// -? removes undefined from key, so we can be sure that prop exists and should have type.\ndeclare type ExtractPropsType<T> = {\n  -readonly [K in keyof ExtractOptionProp<T>]-?: {\n    type: PropType<ExtractOptionProp<T>[K]>,\n    required: undefined extends ExtractOptionProp<T>[K] ? false: true,\n  }\n}\n\n/* Works only with defineComponent function */\nexport function extractComponentProps<T> (component: T, ignoreProps?: string[]): ExtractPropsType<T> {\n  const props = (component as any).props\n\n  if (ignoreProps) {\n    return Object\n      .keys((component as any).props)\n      .reduce<Record<string, unknown>>((acc, propName) => {\n        if (ignoreProps.includes(propName)) { return acc }\n\n        if (props[propName] === undefined) { return acc }\n\n        acc[propName] = props[propName]\n\n        return acc\n      }, {}) as ExtractPropsType<T>\n  }\n\n  return props\n}\n\ndeclare type ExtractEmitsType<T> = T extends ComponentOptionsBase<any, any, any, any, any, any, any, infer E> ? E: []\n\nexport function extractComponentEmits<T> (component: T): ExtractEmitsType<T> {\n  return (component as any).emits\n}\n"],"names":["filterComponentProps","propsValues","childProps","computed","Object","keys","reduce","acc","propName","extractComponentProps","component","ignoreProps","props","includes","undefined","extractComponentEmits","emits"],"mappings":"qCAOaA,EAAuB,CAACC,EAAkCC,IAC9DC,GAAS,IAAMC,OACnBC,KAAKH,GACLI,QAAgC,CAACC,EAAKC,KACrCD,EAAIC,GAAYP,EAAYO,GACrBD,IACN,eAiBSE,EAA0BC,EAAcC,GACtD,MAAMC,EAASF,EAAkBE,MAEjC,OAAID,EACKP,OACJC,KAAMK,EAAkBE,OACxBN,QAAgC,CAACC,EAAKC,KACjCG,EAAYE,SAASL,SAEDM,IAApBF,EAAMJ,KAEVD,EAAIC,GAAYI,EAAMJ,IAJuBD,IAO5C,IAGAK,WAKOG,EAA0BL,GACxC,OAAQA,EAAkBM"}