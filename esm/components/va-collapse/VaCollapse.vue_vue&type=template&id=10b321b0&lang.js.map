{"version":3,"file":"VaCollapse.vue_vue&type=template&id=10b321b0&lang.js","sources":["../../../../src/components/va-collapse/VaCollapse.vue?vue&type=template&id=10b321b0&lang.js"],"sourcesContent":["<template>\n  <div class=\"va-collapse\" :class=\"computedClasses\">\n    <div\n      class=\"va-collapse__header\"\n      v-on=\"SetupContext.keyboardFocusListeners\"\n      @click=\"changeValue()\"\n      @focus=\"$emit('focus')\"\n      @keydown.enter=\"changeValue()\"\n      @keydown.space=\"changeValue()\"\n      :tabindex=\"collapseIndexComputed\"\n    >\n      <slot name=\"header\" v-bind=\"{ value: valueProxy, hasKeyboardFocus: SetupContext.hasKeyboardFocus }\">\n        <div\n          class=\"va-collapse__header__content\"\n          :style=\"contentStyle\"\n        >\n          <va-icon\n            v-if=\"icon\"\n            class=\"va-collapse__header__icon\"\n            :name=\"icon\"\n            :color=\"textColor\"\n          />\n          <div class=\"va-collapse__header__text\">\n            {{ header }}\n          </div>\n          <va-icon\n            class=\"va-collapse__header__icon\"\n            :name=\"valueProxy ? 'expand_less' : 'expand_more'\"\n            :color=\"textColor\"\n          />\n        </div>\n      </slot>\n    </div>\n    <div class=\"va-collapse__body\" ref=\"body\" :style=\"stylesComputed\">\n      <slot />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { inject } from 'vue'\nimport { mixins, Options, prop, setup, Vue } from 'vue-class-component'\nimport VaIcon from '../va-icon'\nimport ColorMixin from '../../services/color-config/ColorMixin'\nimport { getHoverColor } from '../../services/color-config/color-functions'\nimport { StatefulMixin } from '../../mixins/StatefulMixin/StatefulMixin'\nimport useKeyboardOnlyFocus from '../../composables/useKeyboardOnlyFocus'\nimport { Accordion, AccordionServiceKey } from '../va-accordion/VaAccordion.vue'\n\nclass Props {\n  value = prop<boolean>({ type: Boolean, default: false })\n  disabled = prop<boolean>({ type: Boolean, default: false })\n  header = prop<string>({ type: String, default: '' })\n  icon = prop<string>({ type: String, default: '' })\n  solid = prop<boolean>({ type: Boolean, default: false })\n  color = prop<string>({ type: String, default: '' })\n  textColor = prop<string>({ type: String, default: '' })\n  colorAll = prop<boolean>({ type: Boolean, default: false })\n}\n\nconst PropsMixin = Vue.with(Props)\n\nconst TEXT_NODE_TYPE = 3\n\n@Options({\n  name: 'VaCollapse',\n  components: { VaIcon },\n  emits: ['focus'],\n})\nexport default class VaCollapse extends mixins(\n  StatefulMixin,\n  ColorMixin,\n  PropsMixin,\n) {\n  height = 0\n  transitionDuration = this.getTransitionDuration()\n  mutationObserver: any = null\n  valueCollapse = {\n    value: undefined,\n  }\n\n  accordion: Accordion = setup(() => {\n    return inject(\n      AccordionServiceKey,\n      {\n        isInsideAccordion: false,\n        getProps: () => undefined,\n        getState: () => undefined,\n        onChildChange: (ctx: any) => undefined,\n        onChildMounted: (ctx: any) => undefined,\n        onChildUnmounted: (ctx: any) => undefined,\n      })\n  })\n\n  SetupContext = setup(() => {\n    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus()\n\n    return {\n      hasKeyboardFocus,\n      keyboardFocusListeners,\n    }\n  })\n\n  get body (): HTMLElement {\n    return this.$refs?.body as HTMLElement\n  }\n\n  get valueProxy () {\n    if (this.accordion.isInsideAccordion) {\n      return this.valueCollapse.value\n    }\n\n    return this.valueComputed\n  }\n\n  set valueProxy (value) {\n    if (this.accordion.isInsideAccordion) {\n      this.valueCollapse.value = value\n    }\n\n    this.valueComputed = value\n    this.setCollapseParams()\n  }\n\n  get computedClasses () {\n    const accordionProps = this.accordion.getProps()\n\n    return {\n      'va-collapse--disabled': this.disabled,\n      'va-collapse--solid': this.solid,\n      'va-collapse--active': this.solid && this.valueProxy,\n      'va-collapse--popout': accordionProps?.popout && this.valueProxy,\n      'va-collapse--inset': accordionProps?.inset && this.valueProxy,\n    }\n  }\n\n  get contentStyle () {\n    return {\n      paddingLeft: this.icon && 0,\n      color: this.textColor ? this.theme.getColor(this.textColor) : '',\n      backgroundColor: this.color ? this.colorComputed : '',\n      boxShadow: this.SetupContext.hasKeyboardFocus ? '0 0 0.5rem 0 rgba(0, 0, 0, 0.3)' : '',\n    }\n  }\n\n  get stylesComputed () {\n    if (this.valueProxy && (this as any).$slots.default()?.[0]) {\n      return {\n        visibility: 'visible', // allows for better a11y and works well with height-transitions (compared to v-show (display: none in general)\n        height: this.height + 'px',\n        transitionDuration: this.transitionDuration + 's',\n        background:\n          this.color && this.colorAll\n            ? getHoverColor(this.colorComputed)\n            : '',\n      }\n    }\n    return {\n      visibility: 'hidden',\n      height: this.height + 'px',\n      transitionDuration: this.transitionDuration + 's',\n    }\n  }\n\n  get collapseIndexComputed () {\n    return this.disabled ? -1 : 0\n  }\n\n  changeValue () {\n    if (!this.disabled) {\n      this.valueProxy = !this.valueProxy\n      this.accordion.onChildChange(this)\n    }\n  }\n\n  getHeight () {\n    if (!this.valueProxy) {\n      return 0\n    }\n\n    // @ts-ignore\n    const nodes = [...(this.body?.childNodes || [])] as HTMLElement[]\n    return nodes.reduce((result: number, node: HTMLElement) => {\n      result += node.nodeType === TEXT_NODE_TYPE ? this.getTextNodeHeight(node) : node.clientHeight\n      return result\n    }, 0)\n  }\n\n  getTransitionDuration () {\n    const duration = this.height / 1000 * 0.2\n    return duration > 0.2 ? duration : 0.2\n  }\n\n  getTextNodeHeight (textNode: Node) {\n    const range = document.createRange()\n    range.selectNodeContents(textNode)\n    const rect = range.getBoundingClientRect()\n\n    return rect.bottom - rect.top\n  }\n\n  setCollapseParams () {\n    this.height = this.getHeight()\n    this.transitionDuration = this.getTransitionDuration()\n  }\n\n  mounted () {\n    this.getHeight()\n\n    this.mutationObserver = new MutationObserver(() => {\n      this.setCollapseParams()\n    })\n    this.mutationObserver.observe(this.body, {\n      attributes: true,\n      childList: true,\n      subtree: true,\n    })\n    if (this.accordion.isInsideAccordion) {\n      this.accordion.onChildMounted(this)\n    }\n  }\n\n  beforeUnmount () {\n    if (this.mutationObserver) {\n      this.mutationObserver.disconnect()\n    }\n    if (this.accordion.isInsideAccordion) {\n      this.accordion.onChildUnmounted(this)\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources/resources\";\n@import \"variables\";\n\n.va-collapse {\n  transition: var(--va-collapse-transition, var(--va-swing-transition));\n\n  &__body {\n    transition: var(--va-collapse-body-transition);\n    overflow: var(--va-collapse-body-overflow);\n    margin-top: var(--va-collapse-body-margin-top);\n  }\n\n  &__header {\n    &__content {\n      display: var(--va-collapse-header-content-display);\n      justify-content: var(--va-collapse-header-content-justify-content);\n      cursor: var(--va-collapse-header-content-cursor);\n      background-color: var(--va-collapse-header-content-background-color);\n      box-shadow: var(--va-collapse-header-content-box-shadow, var(--va-block-box-shadow));\n      border-radius: var(--va-collapse-header-content-border-radius, var(--va-block-border-radius));\n      align-items: var(--va-collapse-header-content-align-items);\n      padding-top: var(--va-collapse-header-content-padding-top);\n      padding-bottom: var(--va-collapse-header-content-padding-bottom);\n      padding-left: var(--va-collapse-header-content-padding-left);\n    }\n\n    &__text {\n      width: var(--va-collapse-header-content-text-width);\n    }\n\n    &__icon {\n      @include flex-center();\n\n      min-width: var(--va-collapse-header-content-icon-min-width);\n      margin-left: var(--va-collapse-header-content-icon-margin-left);\n      margin-right: var(--va-collapse-header-content-icon-margin-right);\n      color: var(--va-collapse-header-content-icon-color);\n    }\n  }\n\n  &--solid {\n    box-shadow: var(--va-collapse-solid-box-shadow);\n    border-radius: var(--va-collapse-solid-border-radius);\n\n    .va-collapse {\n      &__header {\n        &__content {\n          border-radius: var(--va-collapse-solid-header-content-border-radius, var(--va-block-border-radius));\n          transition: var(--va-collapse-solid-header-content-transition);\n          box-shadow: var(--va-collapse-solid-header-content-box-shadow, var(--va-block-box-shadow));\n          background-color: var(--va-collapse-solid-header-content-background-color);\n        }\n      }\n\n      &__body {\n        border-radius: var(--va-collapse-solid-body-border-radius);\n        margin-top: var(--va-collapse-solid-body-margin-top);\n      }\n    }\n  }\n\n  &--popout {\n    margin: var(--va-collapse-popout-margin);\n  }\n\n  &--inset {\n    margin: var(--va-collapse-inset-margin);\n  }\n\n  &--disabled {\n    @include va-disabled();\n\n    pointer-events: none;\n  }\n}\n</style>\n"],"names":["class","_createBlock","_ctx","_createVNode","_mergeProps","_toHandlers","keyboardFocusListeners","onClick","onFocus","onKeydown","tabindex","_renderSlot","hasKeyboardFocus","style","name","color","_hoisted_1","ref"],"mappings":"4MAsBeA,MAAM,6EArBnBC,SAAKD,OAAM,cAAsBE,qBAC/BC,QAAAC,GACEJ,MAAM,uBACNK,iBAAmBC,yBAClBC,uBAAOL,iBACPM,uBAAON,kBACPO,6BAAeP,+CACAA,8BACfQ,SAAUR,2BAEXS,2BAAqCT,8BAA8BA,eAAaU,mBAAhF,KACET,SACEH,MAAM,+BACLa,MAAOX,iBAGAA,EAAI,UADZD,WAEED,MAAM,4BACLc,KAAMZ,OACNa,MAAOb,oDAEVC,QAAAa,IACKd,aAELC,KACEH,MAAM,4BACLc,KAAMZ,yCACNa,MAAOb,+DAKhBC,SAAKH,MAAM,oBAAoBiB,IAAI,OAAQJ,MAAOX,mBAChDS"}